' Gambas class file

' GambasCAD
' A simple CAD made in Gambas
'
' Copyright (C) Ing Martin P Cristia
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Create Static

' Lineas de puntos para Paint
Public dashes As Integer

' ayudas al usuario en pantalla
Public Struct HelperSt
    texto As String
    dX As Integer '= 5 'defasaje con respecto al mouse
    dY As Integer '= 5
    fColor As Integer '= Color.black
    ShowRect As Boolean '= True
    fRectangulo As Integer ' = Color.ButtonBackground
    fFont As String '= "Arial" (ignorado)
    fHeight As Integer '= 20
End Struct

Public ScreenDensity As Float = 1080 / 29.5  ' pixele by cm wich gives a 1:100 scale in my monitor

Public Helper As New HelperSt       ' Esto se escribe al lado del mouse
Private $CmdLineHelper As String      '   parte inferior izquierda
Private $CmdLineHelperNext As String      '   parte inferior izquierda
Private $CmdLineHelper2 As String     '   sin usar
Private $CmdLineHelper3 As String     '   sin usar
Private $CmdLineHelper4 As String     '   sin usar
Public ErrorMessage As String
Public ErrorTimer As Integer = 0
Public HelperDibujo As String       ' Se escribe abajo "Grid  Ortho" , etc
Public trabajoYteclado As String
Public PromtSlash As String = "|"

Property CmdLineHelper As String
Property CmdLineHelperNext As String

Public Function CleanTexts()

    Helper.texto = ""
    $CmdLineHelper = ""
    $CmdLineHelperNext = ""
    $CmdLineHelper2 = ""
    $CmdLineHelper3 = ""
    $CmdLineHelper4 = ""
    HelperDibujo = ""

End

Public Sub _new()

    helper.texto = ""
    helper.dX = 15 'defasaje con respecto al mouse
    helper.dY = 15
    helper.fColor = Color.black
    helper.ShowRect = True
    helper.fRectangulo = Color.ButtonBackground
    helper.fFont = "Arial"
    helper.fHeight = 10

End

'' All text options in one line
'' 0,0 is center
Public Sub Texting(MyText As String, Optional posX As Integer, posY As Integer, txtColor As Integer = 0, txtHeight As Integer = 12, FontName As String)

    gl.PushMatrix

    gl.LoadIdentity

    glPlus.DrawText(MyText, posX, posY, 0, 10, txtColor)

    gl.PopMatrix

End

Public Sub DibujaHelper()

    Dim sNext As String

    ' If ErrorMessage <> "" Then
    '
    '     texting(ErrorMessage, 10 - fMain.glarea1.w / 2, 30 - fMain.glarea1.h / 2, Color.Red)
    '
    '     If ErrorTimer = 15 Then ErrorMessage = ""
    ' Else
    '     ErrorTimer = 0
    '
    ' End If

    If $CmdLineHelperNext <> "" Then snext = $CmdLineHelperNext & " : "

    trabajoYteclado = " > " & $CmdLineHelper & sNext & fMain.KeysAccumulator ' & PromtSlash

    'fMain.txtCommand.Text = trabajoYteclado

    fmain.Refresh

    ' Texting(trabajoYteclado, 10 - fMain.glarea1.w / 2, 10 - fMain.glarea1.h / 2, gcd.flgWindowInfoColor)

    HelperDibujo = ""
    If gcd.Orthogonal Then HelperDibujo = "F8-Ortho"
    If fmain.GridActive Then HelperDibujo = HelperDibujo & "  F7-Grid = " & Format$(fmain.GridSpacing, "0.00 m")
    ' and so on...

    texting(HelperDibujo, 40, 10 - fMain.glarea1.h / 2, config.WindowInfoColor)

    ' helper del mouse
    If Len(Helper.Texto) = 0 Then Return

    Texting(Helper.Texto, fMain.CursorX - fMain.glarea1.w / 2, -fMain.CursorY + fMain.glarea1.h / 2, Color.DarkGreen, 10)

End Sub

'' Dibuja dX y dY entre dos puntos
Public Sub DrawDxDy(p1 As Float[], p2 As Float[], Optional iSizePix As Integer = 10)

    ' <------------3.45-------------->
    ' y algo similar para Y

    ' el ancho de la flecha es iSizePix/3 y el largo = iPixsize

    ' Si dX es chico  >--< 3.45
    Dim flxTextSize As Float[]
    Dim iTotalLength As Integer ' en pixeles
    Dim sTextX, sTextY As String
    Dim eLineaPpal As Entity
    Dim eOblique1 As Entity       ' tambien pueden ser flechas Solid
    Dim eOblique2 As Entity
    Dim eText As Entity
    Dim ArrowSize As Float = gcd.Metros(iSizePix)
    Dim ArrowWidth As Float = ArrowSize / 4

    sTextX = Format$(p2[0] - p1[0], Config.FormatCoord)
    sTextY = Format$(p2[1] - p1[1], Config.FormatCoord)

    flxTextSize = glPlus.TextExtends(sTextX, iSizePix)

    iTotalLength = flxTextSize[0] + (2 + 0.6) * iSizePix  ' pixeles

    'If iTotalLength < gcd.Pixels(p2[0] - p1[0]) Then ' puedo dibujar todo normalmente
    ' ================eje X===============================
    ' flechas
    eOblique1 = cadSolid.NewEntity([0, 0, ArrowSize, ArrowWidth, ArrowSize, -ArrowWidth, 0, 0])

    eOblique2 = cadSolid.NewEntity([0, 0, -ArrowSize, ArrowWidth, -ArrowSize, -ArrowWidth, 0, 0])
    If p2[0] < p1[0] Then
        Gcd.CCC[eOblique1.gender].rotate(eOblique1, Pi)

        Gcd.CCC[eOblique2.gender].rotate(eOblique2, Pi)

    Endif

    Gcd.CCC[eOblique1.gender].translate(eOblique1, p1[0], p1[1])
    Gcd.CCC[eOblique2.gender].translate(eOblique2, p2[0], p1[1])

    ' linea principal
    eLineaPpal = cadLine.NewEntity([P1[0], P1[1], P2[0], p1[1]])

    ' texto
    eText = cadMText.NewEntity([(p2[0] - p1[0]) / 2 + p1[0], p1[1]])
    eText.fParam[cadMText.ipaAttchmPoint] = 8
    eText.fParam[cadMText.ipaTextHeight] = gcd.Metros(iSizePix)

    eText.StringData[cadText.sdaText] = sTextX

    eOblique1.Colour = config.WindowAidsColor
    eOblique2.Colour = Config.WindowAidsColor
    eLineaPpal.Colour = Config.WindowAidsColor
    eText.Colour = Config.WindowAidsColor

    Gcd.CCC[eOblique1.gender].Draw(eOblique1)
    Gcd.CCC[eOblique2.gender].Draw(eOblique2)
    Gcd.CCC[eLineaPpal.gender].Draw(eLineaPpal)
    Gcd.CCC[eText.gender].Draw(eText)

    ' ================eje Y===============================
    ' flechas
    eOblique1 = cadSolid.NewEntity([0, 0, ArrowSize, ArrowWidth, ArrowSize, -ArrowWidth, 0, 0])
    If p2[1] < p1[1] Then
        Gcd.CCC[eOblique1.gender].rotate(eOblique1, Pi * 3 / 2)
    Else
        Gcd.CCC[eOblique1.gender].rotate(eOblique1, Pi / 2)
    Endif

    Gcd.CCC[eOblique1.gender].translate(eOblique1, p2[0], p1[1])
    eOblique2 = cadSolid.NewEntity([0, 0, -ArrowSize, ArrowWidth, -ArrowSize, -ArrowWidth, 0, 0])
    If p2[1] < p1[1] Then
        Gcd.CCC[eOblique2.gender].rotate(eOblique2, Pi * 3 / 2)
    Else
        Gcd.CCC[eOblique2.gender].rotate(eOblique2, Pi / 2)
    Endif

    Gcd.CCC[eOblique2.gender].translate(eOblique2, p2[0], p2[1])
    eOblique1.Colour = config.WindowAidsColor
    eOblique2.Colour = Config.WindowAidsColor

    eLineaPpal.p.Clear
    eLineaPpal.p.Insert([P2[0], P1[1], P2[0], p2[1]])
    eText.StringData[cadText.sdaText] = sTextY
    eText.p.Clear
    eText.P.Insert([p2[0], (p2[1] - p1[1]) / 2 + p1[1]])

    Gcd.CCC[eOblique1.gender].Draw(eOblique1)
    Gcd.CCC[eOblique2.gender].Draw(eOblique2)
    Gcd.CCC[eLineaPpal.gender].Draw(eLineaPpal)
    Gcd.CCC[eText.gender].Draw(eText)

    'End If

End

Public Sub DrawCoordenadas()

    ' helpers
    Dim l As String, l2 As String, lEsc As String

    l = Format$(gcd.near(gcd.xreal(fMain.cursorX)), "0.00") & " : " & Format$(gcd.near(gcd.Yreal(fMain.cursorY)), "0.00")

    '    l2 = "Mouse: " & Str$(puntos.cursorX) & ": " & Str$(puntos.cursorY)

    l2 = "Zoom " & Format(gcd.Drawing.ScaleZoom, "0.0000") ' & " - Pan: " & Str$(gcd.Drawing.PanX) & ", " & Str$(gcd.Drawing.PanY)

    'FCAD.nDraws = 0

    ' intento determinar la escala
    ' en mi monitor, 29cm  = 1080 pixeles

    fMain.lblCoord.Text = l
    'fMain.lblZoom.text = l2
    Return
    ' TODO: borrar lo q sigue
    Dim e As Float, z As Float
    e = 1080 / 0.29 ' pixeles por metro segun el tamaño real de la pantalla
    z = gcd.Metros(1) ' metros por pixel segun la ampliacion del usuario (rueda del mouse)
    lEsc = "Esc 1:" & Format$(1 / gcd.Drawing.ScaleZoom * 100 * ScreenDensity, "0")

    Texting(l, 10 - fMain.glarea1.w / 2, fMain.glarea1.h / 2 - 15, gcd.flgWindowInfoColor)
    Texting(l2, 10 - fMain.glarea1.w / 2, fMain.glarea1.h / 2 - 35, gcd.flgWindowInfoColor)
    Texting(lEsc, fMain.glarea1.w / 2 - 100, 10 - fMain.glarea1.h / 2, gcd.flgWindowInfoColor)

End

Public Sub DrawEjes()

    ' helper de los ejes coordenados
    ' TODO:  no se porque el fondo de las dashes me sale gris y no blanco
    ' paint.brush = Paint.Color(Color.RGB(0, 0, 0, 0))
    ' paint.LineWidth = 1 / gcd.Drawing.ScaleZoom
    ' paint.Dash = DashDot
    ' paint.MoveTo(0 - (DashDot[0] + DashDot[1] + DashDot[2] / 2), 0) ' me voy al origen de coordenadas
    ' paint.relLineTo(1000, 0)
    ' paint.MoveTo(0, 0 - (DashDot[0] + DashDot[1] + DashDot[2] / 2)) ' me voy al origen de coordenadas
    ' paint.relLineTo(0, 1000)
    ' paint.Dash = []
    ' paint.Stroke

End

' Public Sub DrawCaudricula()
'
'   ' crossing lines each gridspace and darker each 10m
'
'   Dim i, xgg, ygg, xg, yg As Single, espaciado As Single, starting As Single
'
'   espaciado = fMain.pixels(puntos.GridSpacing) ' tamaño de la grid en pixeles
'
'   xg = gcd.xreal(0) ' Puntos reales aproximados al 0,0 de la pantalla
'   yg = gcd.Yreal(0)
'
'   xg = puntos.Near(xg) ' punto en mundo real ajustado a grid
'   yg = puntos.Near(yg)
'
'   xg = puntos.Xpix(xg) - espaciado * 2 ' punto inicial en la drawing area
'   yg = puntos.Ypix(yg) - espaciado * 2
'
'   xgg = xg
'   ygg = yg
'
'   starting = yg ' guardo el Y inicial
'
'   paint.brush = Paint.Color(Color.Gray)
'   paint.LineWidth = 1
'
'   ' lineas finas
'   Do ' lineas horizontales
'     If espaciado < 5 Then Break
'     paint.MoveTo(xg, yg)
'     paint.RelLineTo(FCAD.drwArea.W + espaciado, 0)
'     yg += espaciado - 0.5
'
'   Loop Until yg > (FCAD.drwArea.Height + espaciado * 2)
'
'   xg = xgg
'   yg = ygg
'   Do ' verticales
'     If espaciado < 5 Then Break
'     paint.MoveTo(xg, yg)
'     paint.RelLineTo(0, gcd.Drawing.DdrwArea.Height + espaciado)
'     xg += espaciado - 0.5
'   Loop Until xg > (FCAD.drwArea.Width + espaciado * 2)
'
'   ' lineas gruesas
'
'   paint.Stroke
'
' End

Public Sub DrawPolygons() ' and other debugging stuff

    Dim e As Entity

    ' CmdLineHelper2 = "gcd.clsJob: " & Str(gcd.clsJob) & "->" & Str(ENTITYBUILDER.elem)
    ' '
    ' Texting(HelperTrabajo2, 300, fMain.glarea1.h - 20, Color.Blue)
    ' '
    ' CmdLineHelper2 = "gcd.clsJobPrevious: " & Str(gcd.clsJobPrevious)
    ' '
    '
    ' Texting(HelperTrabajo2, 300, fMain.glarea1.h - 40, Color.Blue)
    '
    ' If gcd.clsJob.gender = "Builder" Then Return

    For Each e In gcd.Drawing.oVisibleEntities
        If e.Polygon Then glPlus.Polygon(e.Polygon, Color.Blue, 1)
    Next

End

Public Sub Refresh()

    'DibujaHelper
    ' fmain.txtInput.X = fmain.W / 2
    ' fmain.txtInput.Y = fmain.h / 2
    ' fmain.txtInput.SetFocus()
    ' 'fmain.txtInput.Text = fmain.KeysAccumulator
    ' fmain.txtInput.Visible = True

End

Private Function CmdLineHelper_Read() As String

    Return $CmdLineHelper

End

Private Sub CmdLineHelper_Write(Value As String)

    $CmdLineHelper = Value
    Me.Refresh()

End

Private Function CmdLineHelperNext_Read() As String

    Return $CmdLineHelperNext

End

Private Sub CmdLineHelperNext_Write(Value As String)

    $CmdLineHelperNext = Value
    Me.Refresh()

End
