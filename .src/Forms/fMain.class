' Gambas class file

'------------------------------------------------------------------------------

'Variables del formulario

Public currentFile As String

Public CursorX As Integer
Public CursorY As Integer

Public KeysAccumulator As String
Public TmrTicks As Integer

'Public SelectedWidth As Boolean

'Private PropertiesFlag As Boolean = False
Private PropertiesFlag As Boolean = True
Private RawFlag As Boolean = False

'variables de ambiente
Public flgShowInspector As Boolean = False

Public flgShowingLayers As Boolean
Public flgNewPosition As Boolean        ' seteada cuando hay un cambio en pan o zoom

Public flgWheelCounter As Integer

Public $hDrawTimer As New Timer As "DrawTimer"
' Block insertion vars
Public fBlockScaleX As Float = 1
Public fBlockScaleY As Float = 1
Public fBlockDegRotation As Float = 0

Public GridSpacing As Float = 0.5
Public GridActive As Boolean = False         ' use with F7: 0 = no grid, 1 = dots, 2 = lines

Public MyPrinter As Printer

Public ftring As New Float[]
Public ftring2 As New Float[]

Public Sub DrawTimer_Timer()

    Dim dx As Single, dy As Single
    Dim EjeX As Single, ejeY As Single, ejeZ As Single

    ' If mouDown Then
    '     If paneando Then
    '
    '         With modGraphics
    '             'ademas intento un zoom dinamico, si el mouse esta lejos del centro, atrae los graficos hacia el
    '             GLCam.StrafeRight((mouDownX - MouseX) * 0.001 * modgraphics.maxmax)
    '             GLCam.MoveUpward(-(mouDownY - Mousey) * 0.001 * modgraphics.maxmax)
    '             'Debug .pan.x, .pan.y, .escala
    '         End With
    '     Else If rotando Then
    '
    '         'veo para donde mueve el mouse con respenco a la posicion 2D del CG
    '
    '         dy = -(mouDownX - MouseX) * 0.075 '* mouDownXCG
    '         dx = -(mouDownY - MouseY) * 0.075 '* mouDownYCG
    '
    '         ' con esto la rotacion se hace de un eje a la vez
    '         If Abs(dy) > Abs(dx) Then
    '
    '             GLCam.RotateY(dy)
    '
    '         Else
    '
    '             GLCam.RotateX(dx)
    '
    '         End If
    '
    '     End If
    '
    '     'modGraphics.dibujar_estructura3D
    '
    '     mouDownX = Mouse.x
    '     mouDownY = Mouse.y
    '
    ' Else If mouWheel Then
    '
    '     GLCam.moveforward(mouDelta * modgraphics.maxmax / 20)
    '
    '     mouDelta = 0
    '     mouWheel = False
    '
    ' End If

    glarea1.Refresh

    '

End Sub

Public Sub Run() As Boolean

    ' acomodo el tamanio de los controles

    Me.tblLineWt.w = 128
    Me.tblLTypes.w = 128
    Me.mbtColors.w = 128
    'Me.mbtLayers.w = 128
    Me.cmbDimStyle.w = 128
    Me.grdLayers.w = 146
    'Me.tbnLayersOnScreen.w = 96

    'PanelBlockFit.Visible = False 'ag = CStr(PanelBlockFit.h)
    'PanelBlockFit.h = 0

    fMain.grdLayers.Rows.Count = 1
    fMain.grdLayers.Columns.Count = 5
    'fMain.grdLayers.Rows[0].Height = 32
    fMain.grdLayers.Rows.Height = 28
    fMain.grdLayers[0, 1].Alignment = Align.Left
    fMain.grdLayers[0, 2].Alignment = Align.Left
    fMain.grdLayers[0, 3].Alignment = Align.Left
    fMain.grdLayers[0, 4].Alignment = Align.Left
    fMain.grdLayers.Columns[0].w = 18 ' color
    fMain.grdLayers.Columns[1].w = 18 ' color
    fMain.grdLayers.Columns[2].w = 18 ' color
    fMain.grdLayers.Columns[3].w = 18 ' color
    fMain.grdLayers.Columns[4].w = 72 ' color

    fLayersOnScreen.Move(Me.grdLayers.x, Me.grdLayers.y + Me.grdLayers.h + 1)

    ' tblLines.AddToolButton("tblLine",, Picture.Load(main.Params["Dirs/PNG", Application.Path &/ "png/48x48"] &/ "line.png"), "cadLine")
    ' tblLines.AddToolButton("tblLWPolyline",, Picture.Load(main.Params["Dirs/PNG", Application.Path &/ "png/48x48"] &/ "hexagon.png"), "cadlwpolyline")
    '
    ' tblLines.AddToolButton("tblText",, Picture.Load(main.Params["Dirs/PNG", Application.Path &/ "png/"] &/ "Copy.png"), "cadText")
    '
    ' ' Armo la barra Inquiry
    '
    ' tblInquiry.AddToolButton("tblArea", "A",, "cadarea")
    ' tblInquiry.AddToolButton("tblRuler", "R",, "cadruler")
    ' tblInquiry.AddToolButton("tblProtracto", "P",, "cadprotractor")

    Action_Activate("file_new")

    tmrAutosave.Delay = main.Params["/AutoSaveDelayMin", 15] * 1000 * 60
    'tmrAutosave.Enabled = True

    Me.Show()
    gcd.DrawingReady = True

    ' instancio la clase Task que maneja el mouse tracking

End

' Public Sub tskMouseTracking_Error(mydata As String)
'
'     Print "Task error", mydata
'
' End
'
' Public Sub mytask_Error(mydata As String)
'
'     Print "Task error", mydata
'
' End

' Public Sub tskMouseTracking_Read(mydata As String)
'
'     Print "Task returns", mydata, tskMouseTracking.Value
'
' End
'
' Public Sub mytask_Read(mydata As String)
'
'     Print "Task returns", mydata, tskMouseTracking.Value
'
' End

Public Sub Printer1_Draw()

    Dim i As Integer
    Dim flxLimits As New Float[]
    Dim scaleX, scaleY As Float
    '  Dim jPrint As New JSONCollection

    Printer1.FullPage = True

    flxLimits = clsEntities.ComputeLimits(gcd.currentDrawing.oEntities)

    Debug "Printing"

    ' '==============================TEST 1==========================================
    ' ' De no mediar escalado y centrado, la impresion ocurrente entre
    '
    ' '   0,0 +-------------------------------+
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       +-------------------------------+ Paint.W, Paint.H (ambos positivos)
    '
    ' '   Pero en OpenGL (y por ende las coordenadas de los dibujos)
    ' '       +-------------------------------+ Xmax,Ymax
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |                               |
    ' '       |               x1,y1-----x2,y2 |
    ' '       +-------------------------------+
    '
    ' ' Supongamos que la linea x1y1----x2y2 tiene la coordenadas [20,-10] - [70,-10]
    ' ' y quiero imprimirla centrada
    ' ' Determino las coordenadas del centro de los dibujos (la linea) [45,-10] y tengo que llevarla al
    ' ' centro del Paint  [.W/2 , .H/2]
    ' ' Test 1
    ' Paint.Translate(Paint.W / 2, Paint.H / 2)
    ' Paint.Translate(-45, 10)
    ' Paint.Brush = Paint.Color(Color.red)
    ' Paint.LineWidth = 3
    ' Paint.MoveTo(20, -10)
    ' Paint.LineTo(70, -10)
    ' Paint.Stroke
    '
    ' '===============================TEST 2=========================================
    ' ' lo mismo pero quiero hacer un Fit al 85% de la hoja, dejando un margen
    ' Paint.Reset ' vuelvo escalas y traslados a cero
    ' Paint.Translate(Paint.W / 2, Paint.H / 2) ' centro el dibujo
    ' scale = Paint.W * 0.85 / (70 - 20)  '(longitud de la linea)
    ' Paint.Scale(scale, -scale) 'scaleY es negativa para compensar la distinta forma de dibujar GL y Paint
    ' ' ahora traslado el dibujo
    ' Paint.Translate(-45, 10)  ' (-) el centro del dibujo
    '
    ' Paint.Brush = Paint.Color(Color.blue)
    ' Paint.LineWidth = 1 / scale
    ' Paint.MoveTo(20, -10)
    ' Paint.LineTo(70, -10)
    ' Paint.Stroke
    '
    ' '==============================TEST 3==========================================
    '
    ' ' testing limites
    ' Paint.reset
    ' Paint.Brush = Paint.Color(Color.red)
    ' Paint.Arc(0, 0, 30)
    '
    ' Paint.Brush = Paint.Color(Color.Purple)
    ' Paint.Arc(Paint.w, Paint.h, 30)
    ' Paint.Fill
    '
    ' '==============================TEST 4==========================================
    ' ' supongamos que el dibujo tiene los siguientes limites [-12,40]-[20,70]
    ' ' voy a dibujar un recuadro centrado y fiteado en la hoja al 85%
    ' Paint.Reset ' vuelvo escalas y traslados a cero
    ' Paint.Translate(Paint.W / 2, Paint.H / 2) ' centro el dibujo
    ' ' veo cual escala manda
    ' scaleX = Paint.w / (20 - (-12))   ' ancho de pagina/ancho del dibujo
    ' scaleY = Paint.H / (70 - 40)      ' alto de pagina/alto dibujo
    '
    ' If scaleX < scaleY Then scale = scaleX Else scale = scaleY
    '
    ' Paint.Scale(scale * 0.85, -scale * 0.85)
    ' ' LAs coordenadas del centro del dibujo son (X0+X1)/2;(Y0+Y1)/2 o sea
    ' Paint.Translate(-(20 + -12) / 2, -(70 + 40) / 2) ' traslado esos valores en negativo
    ' Paint.Brush = Paint.Color(Color.DarkYellow)
    ' Paint.LineWidth = 2 / scale
    ' Paint.Rectangle(-12, 40, (20 - -12), (70 - 40))
    ' Paint.Stroke

    '==============================ACTUAL PRINT==========================================

    Paint.Reset ' vuelvo escalas y traslados a cero
    Paint.Translate(Paint.W / 2, Paint.H / 2) ' centro el dibujo
    ' trato de meter centrado
    If (flxLimits[2] - flxLimits[0]) > 1e-10 Then scaleX = Paint.w / (flxLimits[2] - flxLimits[0]) Else scaleX = 1e10
    If (flxLimits[3] - flxLimits[1]) > 1e-10 Then scaleY = Paint.H / (flxLimits[3] - flxLimits[1]) Else scaleY = 1e10

    If ScaleX < ScaleY Then gcd.PrintingScale = ScaleX Else gcd.PrintingScale = Scaley
    Paint.Scale(gcd.PrintingScale * 0.85, -gcd.PrintingScale * 0.85)

    ' centro el dibujo
    Paint.Translate(-(flxLimits[2] + flxLimits[0]) / 2, -(flxLimits[3] + flxLimits[1]) / 2)

    'For i = 0 To gcd.currentDrawing.cLayer.arrLayer.Max
    '  If gcd.currentDrawing.arrLayers[i].Visible Then

    ' If Exist(FPrint.sConfig) Then
    '     jPrint = JSON.FromString(File.Load(FPrint.sConfig), True)
    '
    ' Endif
    ' '     For i = 0 To gcd.currentDrawing.arrLayers.Max
    '         If gcd.currentDrawing.arrLayers[i].Visible Then
    '             For Each e As Entity In gcd.currentDrawing.arrLayers[i].Entities
    '                 e.ClassHandler.draw2(e)
    '             Next
    '         End If
    '     Next
    '
    Dim L As Layer, E As Entity
    For Each L In gcd.currentDrawing.oLayers
        If L.Visible Then
            For Each E In L.Entities

                If e.LineWidth = 0 Then e.LineWidth = 1
                ' If jPrint.Exist("Monochrome") Then
                '   If jPrint["Monochrome"] Then
                '     e.colour = 255
                '   Endif
                ' Endif
                Paint.Brush = Paint.Color(Color.Black)

                ' TODO: aplicar las puntas segun color de la entidad
                Paint.LineWidth = e.LineWidth / gcd.PrintingScale
                Paint.Save  ' guardamos la matriz de transformacion por si la entidad la modifica
                If InStr("Text MText Attrib Attdef", e.Gender) Then
                    paint.Font.Size = Abs(e.fParam[cadText.ipaTextHeight] / gcd.PrintingScale * 2)   ' TODO: verificar
                End If

                e.ClassHandler.draw2(e)
                Paint.Restore ' restauramos la matriz
            Next
        End If
    Next

    Debug "Print done"

End
' Public Sub Printer1_Draw()
'
'     Dim i As Integer
'     Dim flxLimits As New Float[]
'     Dim scaleX, scale, scaleY As Float
'
'     flxLimits = clsEntities.ComputeLimits(gcd.currentDrawing.arrEntities, True)
'
'     Debug "Printing"
'
'     ' trato de meter centrado
'     scaleX = (flxLimits[2] - flxLimits[0]) / Paint.w 'Printer1.PaperWidth
'     scaleY = (flxLimits[3] - flxLimits[1]) / Paint.h 'Printer1.PaperHeight
'
'     If scaleX > scaleY Then Scale = scaleX Else Scale = scaley
'
'     Paint.Scale(1 / scale, -1 / scale)
'     Paint.Translate(0, -1 * (flxLimits[3] - flxLimits[1]))
'     For i = 0 To gcd.currentDrawing.arrLayers.Max
'         If gcd.currentDrawing.arrLayers[i].Visible Then
'             For Each e As Entity In gcd.currentDrawing.arrLayers[i].Entities
'                 e.ClassHandler.draw2(e)
'             Next
'         End If
'     Next
'
'     Debug "Print done"
'
' End

Public Function Action_Activate(sAction As String) As Boolean
    ' Acciones de los botones y los menús (para no repetir código)
    ' El string de la acción es una propiedad de cada botón o menú
    ' El código que se ejecuta lo hace dentro de la rutina llamada, nunca dentro de este mismo evento.

    Dim r As Float
    Dim NewDrawing As Drawing
    Dim f, fDxf, fBak As String
    'Dim fMinimal As String = "./minimal/minimal-2010.dxf"
    Dim fMinimal As String = "./minimal/minimal.dxf"
    Dim fx As String[]
    Dim fbas As String
    Dim t As String
    Dim iColor, i As Integer
    Dim imgCirculito As Image
    Dim clsJob As String
    Dim d As Drawing
    Dim sActionParams As String[]

    Try Print Last.name

    Select Case LCase(sAction)

        Case "regen"

            gcd.Regen

        Case "menu_blocks_scale"
            Try r = CFloat(InputBox(("Scale:"), ("Block insertion"), "1"))
            clsBlocks.fBlockScaleX = r
            clsBlocks.fBlockScaley = r

        Case "menu_blocks_rot_0"
            clsBlocks.fBlockDegRotation = 0

        Case "menu_blocks_rot_90"
            clsBlocks.fBlockDegRotation = 90

        Case "menu_blocks_rot_180"
            clsBlocks.fBlockDegRotation = 180

        Case "menu_blocks_rot_270"
            clsBlocks.fBlockDegRotation = 270

        Case "menu_blocks_rot_other"

            Try r = CFloat(InputBox(("Rotation (deg):"), ("Block insertion"), "0"))

            clsBlocks.fBlockDegRotation = r
        Case "menu_blocks_mirrored"

            clsBlocks.mPopUp.Children[clsBlocks.mPopUp.Children.Count - 1].Checked = Not clsBlocks.mPopUp.Children[clsBlocks.mPopUp.Children.Count - 1].Checked
            clsBlocks.Mirrored = IIf(clsBlocks.mPopUp.Children[clsBlocks.mPopUp.Children.Count - 1].Checked, -1, 1)

        Case "pdf_export"

            If Printer1.Configure() Then Return
            Printer1.Print
        Case "print"

            fPrint.ShowModal

        Case "undo"
            gcd.currentDrawing.uUndo.DoUndo()
            gcd.Regen
        Case "redo"
            gcd.currentDrawing.uUndo.DoRedo()
            gcd.Regen
        Case "window_close"
            For i = 0 To gcd.Drawings.Count
                If gcd.Drawings[i] = gcd.currentDrawing Then
                    gcd.Drawings.Remove(i)
                    If gcd.Drawings.Count > 0 Then
                        gcd.currentDrawing = gcd.Drawings[0]
                        Redraw
                    Else

                        Action_Activate("file_new")
                    Endif
                    Break
                End If

            Next

        Case "window_closeall"
            gcd.Drawings.Clear
            Action_Activate("file_new")

        Case Like "windowchange_*"

            Dim sWName As String

            sWName = Mid(sAction, 14)

            For Each d In gcd.Drawings
                If sWName = d.FileName Then
                    gcd.currentDrawing = d
                    gcd.UpdateLayersCombo
                    gcd.UpdateLineWtCombo
                    gcd.UpdateLineTypeCombo
                    gcd.UpdatDimTypeTypeCombo
                    Me.redraw
                    Me.Text = f

                    FillWindowMenu
                    Break
                Endif
            Next

        Case "file_quit"

            Me.Close
            Quit

        Case "file_new"

            NewDrawing = New Drawing
            gcd.Drawings.Add(NewDrawing)
            gcd.currentDrawing = gcd.Drawings.Last
            gcd.currentDrawing.FileName = main.dirTemplates &/ "drawing1.dxf"
            dxf.LoadFile(fMinimal, gcd.currentDrawing.cModel)
            gcd.currentDrawing.cEntities = gcd.currentDrawing.cModel["ENTITIES"]
            gcd.currentDrawing.cBlocks = gcd.currentDrawing.cModel["BLOCKS"]
            gcd.currentDrawing.cHeader = gcd.currentDrawing.cModel["HEADER"]
            gcd.currentDrawing.cLayers = gcd.currentDrawing.cModel["TABLES"]["LAYER"]
            gcd.currentDrawing.cLtypes = gcd.currentDrawing.cModel["TABLES"]["LTYPE"]
            gcd.currentDrawing.HandSeed = Val("&H" & gcd.currentDrawing.oHeader.HandSeed)
            gcd.ReadLTypes
            gcd.ReadLayers
            gcd.ReadStyles
            gcd.UpdateLayersCombo
            gcd.UpdateLineWtCombo
            gcd.UpdateLineTypeCombo
            gcd.UpdatDimTypeTypeCombo
            gcd.UpdateGraphics

            Me.Text = f

            FillWindowMenu

            ' Print Last.name
        Case "file_open"

            Dialog.Title = ("Select File")

            If main.convODA Or main.convLibreDWG Then
                Dialog.Filter = ["*.dxf;*.dwg", "Drawings", "*.dxf", "DXF Drawing exchange 2010", "*.dwg", "DWG AutoCAD Drawing file 2010"]
            Else

                Dialog.Filter = ["*.dxf", "Drawings", "*.dxf", "DXF Drawing exchange 2010"]

            End If
            Dialog.OpenFile(False)
            f = Dialog.Path

            'f = "/home/martin/GAUCHO-TESTING-V2000-online converter.dxf"

            If Exist(f) Then
                If Stat(f).Type = gb.File Then
                    Select Lower(File.Ext(f))
                        Case "dwg"

                            NewDrawing = New Drawing
                            gcd.Drawings.Add(NewDrawing)
                            gcd.currentDrawing = gcd.Drawings.Last
                            gcd.currentDrawing.FileName = f
                            dxf.LoadFile(fMinimal, gcd.currentDrawing.cModel)

                            fMain.Mouse = Mouse.Wait
                            Application.Busy = 1
                            'fDxf = dxf.DWGtoDXF(f)
                            If main.convODA Then
                                fDxf = gcd.ODA_DWGtoDXF(f)
                            Else If main.convLibreDWG Then
                                fDxf = gcd.LibreDWGtoDXF(f)
                            End If

                            If fDxf = "" Then
                                Message(("Can't open file: Error On conversion"))
                                Return
                            Endif

                            gcd.currentDrawing.RequiresFileRename = True

                            dxf.LoadFile(fDxf, gcd.currentDrawing.cModel, False, False, False)
                            gcd.currentDrawing.cEntities = gcd.currentDrawing.cModel["ENTITIES"]
                            gcd.currentDrawing.cBlocks = gcd.currentDrawing.cModel["BLOCKS"]
                            gcd.currentDrawing.cHeader = gcd.currentDrawing.cModel["HEADER"]
                            gcd.currentDrawing.cLayers = gcd.currentDrawing.cModel["TABLES"]["LAYER"]
                            gcd.currentDrawing.cLtypes = gcd.currentDrawing.cModel["TABLES"]["LTYPE"]
                            gcd.currentDrawing.HandSeed = Val("&H" & gcd.currentDrawing.oHeader.HandSeed)
                            gcd.ReadVars
                            gcd.ReadLTypes
                            gcd.ReadLayers
                            gcd.ReadStyles
                            gcd.UpdateLayersCombo
                            gcd.UpdateLineWtCombo
                            gcd.UpdateLineTypeCombo
                            gcd.UpdatDimTypeTypeCombo
                            gcd.UpdateGraphics

                            ' modelo recien cargado
                            cadZoomE.Start()                                ' por ahora mostramos el dibujo centrado, hasta q leamos el estado anterior

                            Me.Text = f

                            Application.Busy = 0
                            fMain.Mouse = Mouse.Arrow
                        Case "dxf"

                            NewDrawing = New Drawing
                            gcd.Drawings.Add(NewDrawing)
                            gcd.currentDrawing = gcd.Drawings.Last
                            dxf.LoadFile(fMinimal, gcd.currentDrawing.cModel)

                            gcd.currentDrawing.FileName = f

                            gcd.currentDrawing.RequiresFileRename = False

                            dxf.LoadFile(f, gcd.currentDrawing.cModel, False, False, False)
                            gcd.currentDrawing.cEntities = gcd.currentDrawing.cModel["ENTITIES"]
                            gcd.currentDrawing.cBlocks = gcd.currentDrawing.cModel["BLOCKS"]
                            gcd.currentDrawing.cHeader = gcd.currentDrawing.cModel["HEADER"]
                            gcd.currentDrawing.cLayers = gcd.currentDrawing.cModel["TABLES"]["LAYER"]
                            gcd.currentDrawing.cLtypes = gcd.currentDrawing.cModel["TABLES"]["LTYPE"]
                            gcd.currentDrawing.HandSeed = Val("&H" & gcd.currentDrawing.oHeader.HandSeed)
                            gcd.ReadVars
                            gcd.ReadLTypes
                            gcd.ReadLayers
                            gcd.ReadStyles
                            gcd.UpdateLayersCombo
                            gcd.UpdateLineWtCombo
                            gcd.UpdateLineTypeCombo
                            gcd.UpdatDimTypeTypeCombo
                            gcd.UpdateGraphics

                            cadZoomE.Start()                                ' por ahora mostramos el dibujo centrado, hasta q leamos el estado anterior

                            Me.Text = f

                    End Select
                Endif
            Endif

            FillWindowMenu

        Case "file_save"

            f = gcd.currentDrawing.FileName

            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"
            If gcd.currentDrawing.RequiresFileRename Then
                Me.Action_Activate("file_saveas")
                Return
            Else
                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                If File.Ext(f) = "dxf" Then
                    Dxf.SaveFile(f, gcd.currentDrawing.cModel, gcd.currentDrawing)
                Else If File.Ext(f) = "dwg" Then
                    ' guardamos la version DXF en el dir adecuado, con el nombre elegido
                    't = main.dirDxfOut &/ Utils.FileWithoutExtension(Utils.FileFromPath(f)) & ".dxf"
                    t = Temp & ".dxf"
                    Dxf.SaveFile(t, gcd.currentDrawing.cModel)
                    t = gcd.oda_dxftodwg(t)
                    ' como el proceso de grabado pudo resultar en error, chequeo la existencia primero

                    If Exist(t) Then Move t To f

                End If

            Endif

        Case "file_saveas"

            f = gcd.currentDrawing.FileName
            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"

            Dialog.AutoExt = True
            Dialog.Filter = ["*.dxf", "DXF Drawing exchange 2010", "*.dwg", "DWG AutoCAD Drawing file 2010"]
            If Dialog.SaveFile() Then Return ' cancel saving

            f = Dialog.Path

            If Exist(f) Then
                If Message.Question(("The file exist"), ("Replace"), ("Cancel")) = 2 Then
                    f = ""
                Endif
            Endif

            If f = "" Then
                Print "Cancel"
            Else

                'If LCase(File.Ext(f)) <> "dxf" Then f &= ".dxf"
                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                gcd.currentDrawing.FileName = f
                gcd.currentDrawing.RequiresFileRename = False
                Action_Activate("file_save")

                Me.Text = f

            Endif

        Case Like "color_*"

            iColor = CInt(Mid(sAction, 7))
            mbtColors.Text = "Color " & CStr(iColor) 'Me.mbtColors.Children[iColor].Text
            If iColor = 256 Then mbtColors.Text = "ByLayer"
            If iColor = 257 Then mbtColors.Text = "ByBlock"

            mbtColors.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            gcd.currentDrawing.CurrColor = iColor

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("color", iColor)
            clsEntities.DeSelection()

        Case Like "cad*"

            ' actions, with & for additional parameters
            ' cadDimension_Linear&horizontal

            Dim o As Object, sRunWith As String, iParam As Integer, c As Class

            sActionParams = Split(sAction, "&")
            sRunWith = sActionParams[0]
            Try iParam = CInt(sActionParams[1])
            gcd.clsJobPrevious = gcd.clsJob

            o = Object.New(sRunWith)

            ' check if the class needs to be run trough other class
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJob = o
                gcd.clsJob.start(iParam)

            Else                                           ' its propably an eentity

                gcd.clsJob = Object.New(o.usewith)
                gcd.clsJob.start(o, iParam)

            End If

        Case Like "layer_change_*"

            Dim sLayerName As String

            sLayerName = Mid(sAction, 14)

            ' mbtLayers.Text = sLayerName
            ' iColor = gcd.currentDrawing.cLayers[sLayerName][dxf.codColor]
            ' mbtLayers.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            ' informamos
            gcd.currentDrawing.CurrLayer = gcd.GetLayer(sLayerName)

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("layer", gcd.currentDrawing.CurrLayer)
            clsEntities.DeSelection()

        Case Like "linewt_change_*"

            gcd.currentDrawing.CurrLineWt = CInt(Mid(sAction, 15)) / 100

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("linewt", gcd.currentDrawing.CurrLineWt)
            clsEntities.DeSelection()

        Case Like "ltype_change_*"

            gcd.currentDrawing.CurrLineType = gcd.FindLType(Mid(sAction, 14))

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("linetype", gcd.currentDrawing.CurrLineType)
            clsEntities.DeSelection()

    End Select

End

Public Sub Form_Activate()

    GLplus.Init(glarea1)

End

Public Sub LeerRecientes()

    'TODO esto deberia estar en un ini
    ' obtengo los lastopen

    Paint

    main.setting.lastopen1 = main.params["Files/LastOpen1", ""]
    main.setting.lastopen2 = main.params["Files/LastOpen2", ""]
    main.setting.lastopen3 = main.params["Files/LastOpen3", ""]
    main.setting.lastopen4 = main.params["Files/LastOpen4", ""]
    main.setting.lastopen5 = main.params["Files/LastOpen5", ""]

    If Exist(main.setting.lastopen1) Then

        mnuReciente1.Text = main.setting.lastopen1
        mnuReciente1.Visible = True
        'sep4.Visible = True

    Else
        mnuReciente1.Visible = 0
        'sep4.Visible = 0
        main.setting.lastopen1 = ""
    End If
    If Exist(main.setting.lastopen2) Then
        mnuReciente2.Text = main.setting.lastopen2
        mnuReciente2.Visible = True

    Else
        mnuReciente2.Visible = 0
        main.setting.lastopen2 = ""

    End If
    If Exist(main.setting.lastopen3) Then
        mnuReciente3.Text = main.setting.lastopen3
        mnuReciente3.Visible = True

    Else
        mnuReciente3.Visible = 0
        main.setting.lastopen3 = ""

    End If

    If Exist(main.setting.lastopen4) Then
        mnuReciente4.Text = main.setting.lastopen4
        mnuReciente4.Visible = True

    Else
        mnuReciente4.Visible = 0
        main.setting.lastopen4 = ""

    End If

    If Exist(main.setting.lastopen5) Then
        mnuReciente5.Text = main.setting.lastopen5
        mnuReciente5.Visible = True

    Else
        mnuReciente5.Visible = 0
        main.setting.lastopen5 = ""

    End If

End

Public Sub GuardarParametros()

    If main.setting.lastopen1 <> "" Then main.params["Files/LastOpen1"] = main.setting.lastopen1
    If main.setting.lastopen2 <> "" Then main.params["Files/LastOpen2"] = main.setting.lastopen2
    If main.setting.lastopen3 <> "" Then main.params["Files/LastOpen3"] = main.setting.lastopen3
    If main.setting.lastopen4 <> "" Then main.params["Files/LastOpen4"] = main.setting.lastopen4
    If main.setting.lastopen5 <> "" Then main.params["Files/LastOpen5"] = main.setting.lastopen5

End

Public Sub VerifLastOpen(sA_Abrir As String)

    Dim loTengo As Integer
    ' reacomodo los Recientes, de maanera SIMPLE

    ' primero veo si lo tengo
    loTengo = False
    If sA_Abrir = mnuReciente1.text Then loTengo = 1
    If sA_Abrir = mnuReciente2.text Then loTengo = 2
    If sA_Abrir = mnuReciente3.text Then loTengo = 3
    If sA_Abrir = mnuReciente4.text Then loTengo = 4
    If sA_Abrir = mnuReciente5.text Then loTengo = 5

    If Not lotengo Then
        ' desplazo todos los recientes hacia abajo
        main.setting.lastopen5 = main.setting.lastopen4
        main.setting.lastopen4 = main.setting.lastopen3
        main.setting.lastopen3 = main.setting.lastopen2
        main.setting.lastopen2 = main.setting.lastopen1
        main.setting.lastopen1 = sA_Abrir

        GuardarParametros
        LeerRecientes

    End If
    sA_Abrir = ""

End

Public Sub form_Close()

    Me.Close

    main.Terminate

End

Public Sub glarea1_Resize()

    GLplus.Resize(glarea1)

End

Public Sub GLArea1_draw()

    Dim iParent As Integer
    Dim i As Integer
    Dim L As Layer

    If Not gcd.DrawingReady Then Return

    gcd.drwDrawingClass = gcd.drwOpenGLClass

    gl.Clear(gl.DEPTH_BUFFER_BIT Or gl.COLOR_BUFFER_BIT)

    gl.LoadIdentity

    gl.Translatef(gcd.currentDrawing.PanX, gcd.currentDrawing.PanY, 0)

    gl.Scalef(gcd.currentDrawing.ScaleZoom, gcd.currentDrawing.ScaleZoom, 1)

    ' el orden del dibujo es importante en paint, porque una cosa tapa a la otra; en openGL aparentemente es al reves, lo primero se dibuja primero

    ' Primero la grid
    ' DrawingAids.DrawGrid

    ' ' TEST
    ' Dim fArcParams As Float[]
    '
    ' ' aqui podria usar una rutina de arco entre 3 puntos
    ' fArcParams = puntos.Arc3Point(0, 0, -100, 50, -300, 20)
    ' ' traslado el centro
    ' gl.Translatef(fArcParams[0], fArcParams[1], 0)
    ' glPlus.Arc(fArcParams[2], fArcParams[3], fArcParams[4] - fArcParams[3], Color.Blue, 1, 0)
    ' gl.Translatef(-fArcParams[0], -fArcParams[1], 0)
    ' fArcParams = Null
    '
    If gcd.DrawBounds Then DrawingAids.DrawPolygons

    ' glPlus.Triangles(ftring, Color.Red, Color.Red)
    '
    ' glPlus.Triangles(ftring2, Color.Blue, Color.blue)

    If gcd.currentDrawing.HoveredEntity Then
        ' si no esta seleccionada, la resalto
        'If Not arrEntities[iEntity[3]].Selected Then
        'iParent = clsEntities.GetParentBlock(gcd.currentDrawing.iEntity[3]) ' esto verifica si tiene que resaltar el bloque completo

        gcd.currentDrawing.HoveredEntity.ClassHandler.DrawRemark(gcd.currentDrawing.HoveredEntity)
    End If

    DrawingAids.DrawCoordenadas

    DrawingAids.DibujaHelper

    For Each L In gcd.currentDrawing.oLayers
        If L.Visible Then gl.CallList(L.glList)
    Next
    '
    'clsEntities.DrawArrays()

    'gl.CallList(gcd.currentDrawing.GlListAllEntities)

    ' POI dinamicos
    If gcd.currentDrawing.flgShowPOIinfo Then

        Select gcd.currentDrawing.iEntity[2]
            Case gcd.poiMidPoint
                glPlus.PolygonFilled([gcd.currentDrawing.iEntity[0] - Metros(4), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] + Metros(4), gcd.currentDrawing.iEntity[0] + Metros(4), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] - Metros(4)], Color.Blue, Color.Green)
            Case gcd.poiQuadrant
                glPlus.PolygonFilled([gcd.currentDrawing.iEntity[0] - Metros(6), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] + Metros(6), gcd.currentDrawing.iEntity[0] + Metros(6), gcd.currentDrawing.iEntity[1], gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1] - Metros(6)], Color.Cyan, Color.Cyan)

            Case -1
                ' nada
            Case gcd.poiCenter, gcd.poiBasePoint

                glPlus.Circle([gcd.currentDrawing.iEntity[0], gcd.currentDrawing.iEntity[1]], Metros(4), Color.Cyan, True, False)
                'glPlus.Rectangle2D(gcd.currentDrawing.iEntity[0] - Metros(4), gcd.currentDrawing.iEntity[1] - Metros(4), Metros(8), Metros(8), Color.Blue,,,, Color.Blue, 1, 1)

            Case Else
                glPlus.Rectangle2D(gcd.currentDrawing.iEntity[0] - Metros(4), gcd.currentDrawing.iEntity[1] - Metros(4), Metros(8), Metros(8), Color.Blue,,,, Color.Blue, 1, 1)

        End Select

    Endif

    If flgNewPosition Then
        clsEntities.CollectVisibleEntities
        flgNewPosition = False
    End If

    gcd.clsJob.Draw()
    ' Debug "Drawn", cint(Rnd(0, 1000))

End

' Protocolo del Mouse
'--------------------

' Rigth Clicks  ---> No son enviados a las clases herramienta/entidad; son procesados por FCAD como accion es que terminan o empiezan algo. Tanto MouseDown/Up
'   MouseDown ---------> Lo ignoro
'   MouseUp -----------> A-Trabajo activo? Mando señal de Finalizar/Cancelar ya mismo
'                        B- Click en objeto: muestro las propiedades frmPropiedades (aun no implementado)
'                           Click en el aire: Equivale a <enter> que repite el trabajo anterior, si lo hubo.

' Wheel -----------> Es utilizado como zoom. No es enviado a las clases.

' MouseMove--------> 1-Trabajo activo? --> Se envia el evento
'                    2-Paneando? Se actualizan los valores de PanX/Y y se refresca la pantalla

' Left Clicks
'   MouseDown------> 1- Trabajo activo? -> Se envia a la clase que trabaja gcd.clsJobs si hay una activa. Sino se analziza donde fue el click.
'                    2- no hay trabajos:
'                           2.a- Click en el aire  --> o Paneo, segun el boton que este presionado.
'                           2.b- Click en objeto   --> De/selecciono el objeto
'
'
'
'   MouseUp-------->1-Trabajo activo: ---> envio evento
'
'

Public Sub GLArea1_MouseDown()

    If Mouse.Right Then Return  'handled in MouseUp

    If Mouse.Middle Then Return  'handled in MouseUp

    Select gcd.clsJob.gender

        Case "Default"                                                  ' 1. Seleccionando

            gcd.clsJob.mouseDown(mouse.x, mouse.y)                               '    -> envio el evento a la clase default

        Case "Builder"                                                  ' 2.Construyendo una entidad

            gcd.clsJob.mouseDown(mouse.x, mouse.y)                                   '      y envio el evento a la clase

        Case Else

            gcd.clsJob.mouseDown(mouse.x, mouse.y)                                   ' dispatch event to the Job

    End Select

    redraw

End

Public Sub GLArea1_DblClick()

    Dim k As Single
    Dim e As Entity
    Dim te As Entity

    CursorX = mouse.x
    CursorY = mouse.y

    Select gcd.clsJob.gender

        Case "Default"                                                  ' 1. Seleccionando

            If Not gcd.flgSearchingEntity Then
                gcd.clsJob.EntityForEdit = clsMouseTracking.CheckAboveEntity(Xreal(mouse.x), Yreal(mouse.Y), Metros(8))

            Else    ' estoy buscando, pero me movi, asi que me desengancho del POI anterior

                gcd.currentDrawing.iEntity[0] = Xreal(mouse.x)
                gcd.currentDrawing.iEntity[1] = Yreal(mouse.y)
                gcd.currentDrawing.iEntity[2] = -1                 ' POI type

            End If

            If gcd.clsJob.EntityForEdit Then

                'Stop
                ' I comment the abobe line because its stop my tool also. What is the idea whit stop?
                ' TINCHO aca podes lanzar tu editor de texto u otras propiedades

                Select gcd.clsJob.EntityForEdit.Gender
                    Case "Text"

                End Select
            Endif
            '======================= otra Tool
        Case Else

    End Select

End

Public Sub GLArea1_MouseMove()

    ' Voy a cambiar un poco el sistema porque me pierdo:

    ' Primero busco entidades bajo el mouse
    ' luego, si hace falta, busco POI dentro de esa entidad

    'Debug "Pan", gcd.currentDrawing.PanX, gcd.currentDrawing.Pany
    'Debug "MouseMove event", Rnd(0, 1000)
    CursorX = mouse.x
    CursorY = mouse.y

    Select gcd.clsJob.gender

        Case "Default"                                                  ' 1. Seleccionando
            gcd.clsJob.MouseMove(mouse.x, mouse.y) ' dispatch event to the Job
            If Not gcd.flgSearchingEntity Then
                gcd.currentDrawing.HoveredEntity = clsMouseTracking.CheckAboveEntity(Xreal(mouse.x), Yreal(mouse.Y), Metros(8))
                If gcd.clsJob.EntityForEdit Then
                    gcd.currentDrawing.iEntity[2] = -1
                    gcd.currentDrawing.HoveredEntity = clsMouseTracking.CheckAboveEntity(Xreal(mouse.x), Yreal(mouse.Y), Metros(8))
                    If gcd.currentDrawing.HoveredEntity Then
                        gcd.currentDrawing.iLastEntity = gcd.currentDrawing.HoveredEntity
                    End If

                Else
                    'Debug "No puedo buscar entidades"
                End If
            Else
                If Not gcd.flgSearchingPOI Then
                    gcd.currentDrawing.iEntity = clsMouseTracking.CheckPOI(Xreal(mouse.x), Yreal(mouse.Y))
                Else    ' estoy buscando, pero me movi, asi que me desengancho del POI anterior

                    gcd.currentDrawing.iEntity[0] = Xreal(mouse.x)
                    gcd.currentDrawing.iEntity[1] = Yreal(mouse.y)
                    gcd.currentDrawing.iEntity[2] = -1                 ' POI type

                End If
            End If

            If Config.TrackShowInspector Then

                If gcd.currentDrawing.HoveredEntity Then

                    FInspector.Run(gcd.currentDrawing.HoveredEntity)
                Else
                    FInspector.Close

                Endif
            End If

            '======================= otra Tool
        Case Else

            If gcd.clsJob.poichecking Then
                If Not gcd.flgSearchingPOI Then
                    gcd.currentDrawing.iEntity = clsMouseTracking.CheckPOI(Xreal(mouse.x), Yreal(mouse.Y))
                Else    ' estoy buscando, pero me movi, asi que me desengancho del POI anterior

                    gcd.currentDrawing.iEntity[0] = Xreal(mouse.x)
                    gcd.currentDrawing.iEntity[1] = Yreal(mouse.y)
                    gcd.currentDrawing.iEntity[2] = -1                 ' POI type

                End If

            End If

            If gcd.clsJob.EntityChecking Then

                ' verifico antes de buscar
                If Not gcd.flgSearchingEntity Then gcd.currentDrawing.HoveredEntity = clsMouseTracking.CheckAboveEntity(Xreal(mouse.x), Yreal(mouse.Y), Metros(8))

            End If

            gcd.currentDrawing.flgShowPOIinfo = True

            DrawingAids.Helper.dX = 15
            DrawingAids.Helper.dY = 15
            DrawingAids.Helper.fColor = Color.DarkBlue
            gcd.clsJob.MouseMove(mouse.x, mouse.y) ' dispatch event to the Job

    End Select

    redraw

End

Public Sub GLArea1_MouseUp()
    ' ex Public Sub drwArea_MouseUp()

    ' "Los IF son mas rapidos" - Autor Anonimo

    ' verifico que no haya habido un menu en la tool
    'If (gcd.clsJob.MenuRightClick <> "") And Mouse.Then Return      ' no se maneja aca el click

    ' los rigth clicks se manejan en FCAD , ni las herramientas ni las entidades los necesitan
    If Mouse.Right Then                ' rigth clicks means finish what you're doing rigth now and go back to the previous Job
        ' the Finish() sub will do this in a good manner
        If gcd.clsJob.gender = "Builder" Then

            gcd.clsJob.KeyText("U")

        Else If gcd.clsJob.gender = "Default" Then

            gcd.clsJob = gcd.clsJobPrevious
            gcd.clsJob.Start()

        Else    ' es una tool

            gcd.clsJob.MouseRightUp(mouse.x, mouse.y)

        Endif

    Else If Mouse.Left Then

        gcd.clsJob.MouseUp(mouse.x, mouse.y)

    Else If Mouse.Middle Then

        If gcd.clsJob.gender <> "Pan" Then
            gcd.clsJobPreZoom = gcd.clsJob
            gcd.clsJob = cadPan
            gcd.clsJob.Start()

        Else

            gcd.clsJob = gcd.clsJobPreZoom

        End If

    End If

    redraw

End

Public Function Xreal(ScreenX As Float) As Float

    Return Metros((screenx - glarea1.w / 2 - gcd.currentDrawing.PanX))

End

Public Function Yreal(ScreenY As Float) As Float

    Return Metros((-ScreenY + glarea1.h / 2 - gcd.currentDrawing.PanY))

End

Public Function XPix(X As Float) As Float

    'Return Metros((screenx - glarea1.w / 2 - gcd.currentDrawing.PanX))
    Return Me.Pixels(X) + glarea1.w / 2 + gcd.currentDrawing.PanX

End

Public Function YPix(Y As Float) As Float

    'Return Metros((-ScreenY + glarea1.h / 2 - gcd.currentDrawing.PanY))
    Return -(Me.Pixels(Y) - glarea1.h / 2 + gcd.currentDrawing.PanY)

End

Public Function Pixels(distancia As Float) As Float  ' converts meters to pixels
    ' transforma Metros en Pixeles sin tener en cuenta el Pan

    Return distancia * gcd.currentDrawing.ScaleZoom

End

Public Function Metros(pixeles As Integer) As Float  ' converts pixels to meters

    Return pixeles / gcd.currentDrawing.ScaleZoom

End

Public Function Near(xyzReal As Float) As Float
    ' return the nearest point to the grid
    ' this is a world to world points (not pixels)

    ' Example:
    ' if                    GridSpacing = 0.2
    ' we pass               xyzReal = 1.35
    ' function will give    NearReal = 1.40

    Dim n As Integer, r As Float

    If Not Gridactive Then Return xyzReal

    r = xyzReal / GridSpacing
    n = Int(r)
    r = r - Int(r)

    If r > 0.5 Then n += 1

    Return n * GridSpacing

End

' El objetivo es que el zoom dinamico se haga manteniendo el dibujo que esta en la pos del mouse
Public Sub GLArea1_MouseWheel()

    Dim px, py, dx, dy, factor As Float
    ' chequeamos si vale la pena seguir dibujando la grid, o sea, menos de 3 pixels
    ' Inc flgWheelCounter
    ' Debug "Mouse weel", flgWheelCounter

    'If Pixels(GridSpacing) < 5 Then GridActive = False Else GridActive = True

    px = Xreal(Mouse.x) ' posicion real en donde esta el mouse, previo al zoom
    py = Yreal(Mouse.y)

    ' TODO: , redondear para que la escala sea 1:100 1:75 1:50 etc

    factor = (1 + 0.075 * Mouse.Delta)

    gcd.currentDrawing.ScaleZoom = gcd.currentDrawing.ScaleZoom * factor

    dx = Xreal(Mouse.x) ' posicion real en donde esta el mouse, posterior al zoom
    dy = Yreal(Mouse.y)

    ' pero con ciertos limites TODO: imponer
    ' If ScaleZoom < 0.001 Then ScaleZoom = 0.001
    ' If ScaleZoom > 50 Then ScaleZoom = 50

    ' nuevo metodo (el Pan esta en pixels)
    gcd.currentDrawing.PanX += pixels(dx - px)
    gcd.currentDrawing.PanY += pixels(dy - py)

    flgNewPosition = True

    'Debug "Drawing requested"
    redraw 'glarea1.Refresh

    ' despues de actualizar la pantalla, recolectamos las entidades visibles

    ' Dec flgWheelCounter

    ' Test
    ' Debug "Mouse tracking task ID", tskMouseTracking.Handle

End

Public Sub redraw()

    $hDrawTimer.Trigger
    Wait 0.001

End

Public Sub Form_Keypress()

    Dim com As Variant
    Dim umx As Integer     '' Index in undo array
    Dim uEnty As Entity    '' Undo entity
    Dim aEnty, e As Entity    '' Actual entity
    Dim imx As Integer     '' Index in Entities array
    Dim SelectMode As Boolean

    ' Print Key.Code
    Dim t As Float = Timer
    Dim ftring2 As Float[]
    Dim a As Integer
    Dim oki As Integer

    Select Key.Code

        Case Key.Enter, Key.Return
            Debug KeysAccumulator

            '            Form_Activate()

            gcd.clsJob.KeyText(KeysAccumulator)
            KeysAccumulator = ""

        Case Key.f2
            ' t = Timer
            ' Dim NE As New Entity
            ' Debug "Creando 500.000 lineas"
            ' For a = 1 To 500000
            '     NE = cadLine.NewEntity([Rnd(-100, 100), Rnd(-100, -100), Rnd(100, 100), Rnd(100, 100)])
            '     NE.ClassHandler.finish(ne)
            '     gcd.currentDrawing.oEntities.Add(ne, ne.Handle)
            '
            ' Next
            ' Debug "Creadas", Timer - t
            ' t = Timer
            ' gcd.FillLayers()
            ' gcd.Regen
            ' cadZoomE.Start()
            ' clsEntities.CollectVisibleEntities
            '
            ' Debug "Regen en ", Timer - t
            ' Dim oka As Boolean
            ' t = Timer
            ' For Each NE In gcd.currentDrawing.oEntities
            '     oka = NE.ClassHandler.MouseOverMe(NE, 2000, 2000, 10)
            ' Next
            ' Debug "Tracking via ClassHandler en ", Timer - t
            '
            ' t = Timer
            '
            ' NE = clsMouseTracking.CheckAboveEntity(2000, 2000, 10)
            '
            ' Debug "Tracking via clsMouseTRacking en ", Timer - t
            '
            ' ' lleno poi
            ' t = Timer
            ' For Each NE In gcd.currentDrawing.oEntities
            '     Inc a
            '     gcd.currentDrawing.poiLines.Insert(NE.p.Copy())
            '     gcd.currentDrawing.oExtras.Add(ne.Handle, Str(a))
            ' Next
            ' Debug "Llenado del POI en ", Timer - t
            ' t = Timer
            ' a = puntos.inPolySegment(gcd.currentDrawing.poiLines, 2000, 2000, 10)
            ' Debug "Busqueda via POI en ", Timer - t
            ' Stop
            ' ftring = puntos.PolygonTriangulation3([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'ftring2 = puntos.PolygonTriangulation([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'puntos.Translate(ftring2, 80, 0)

        Case Key.f6

            gcd.DrawBounds = Not gcd.DrawBounds
            Me.redraw

        Case Key.BackSpace

            KeysAccumulator = Left(KeysAccumulator, -1)

        Case Key.f8

            ' Debug "Entidades transferidas en  ", Timer - t

            gcd.Orthogonal = Not gcd.Orthogonal

            tbnOrtho.Value = gcd.Orthogonal

        Case Key.f7
            ' If btnGrid.Value = False Then
            '   puntos.Gridactive = True
            ' Else
            '   puntos.Gridactive = False
            ' Endif
            ' btnGrid.Value = puntos.Gridactive

        Case Key.F11

        Case Key.Esc

            If gcd.clsJob.gender = "Builder" Then

                gcd.clsJob.KeyText("U")

            Else If gcd.clsJob.gender = "Default" Then

                gcd.clsJob = gcd.clsJobPrevious
                gcd.clsJob.Start()

            Else    ' es una tool

                gcd.clsJob.finish
                gcd.clsJobPrevious = gcd.clsJob
                gcd.clsJob = cadSelection

            Endif

            ' SelectionRefresh()

        Case Key.Space
            Stop Event

        Case Key.Del
            gcd.clsJob.KeyText("Erase")

        Case Key.ControlKey
            KeysAccumulator = "Function"

        Case Else
            ' A GOOD KEY
            If InStr(KeysAccumulator, "Function") > 0 Then

                ' Select Key.Code
                '   Case Asc("1") ' Properties
                '
                '     Select PropertiesFlag
                '       Case 1 ' Tools
                '         PropertiesFlag = 2
                '         pnlProperties.Visible = True
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = False
                '       Case 2 ' Props
                '         PropertiesFlag = 0
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = True
                '
                '       Case Else ' Invisible
                '         PropertiesFlag = 1
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = True
                '
                '     End Select
                '
                '     If PropertiesFlag = False Then
                '       pnlProperties.Visible = True
                '       PropertiesFlag = True
                '       pnlIcons.Visible = False
                '       btnSelectionMode.Value = False
                '     Else
                '       pnlProperties.Visible = False
                '       PropertiesFlag = False
                '       pnlIcons.Visible = True
                '       btnSelectionMode.Value = True
                '     Endif
                '
                '   Case Asc("2") ' Layers
                '
                '     'Case Asc("3") ' Blocks
                '
                '     'Case Asc("4...") ' More...
                '     'KeysAccumulator &= "-" & Key.Text
                '     'Case Else
                '     '    KeysAccumulator = ""
                '     'pnlProperties.Visible = False
                '     'pnlDebug.Visible = False
                '
                '   Case Asc("3") ' Raw properties for debuging
                '     If RawFlag = False Then
                '       pnlRaw.Visible = True
                '       RawFlag = True
                '     Else
                '       pnlRaw.Visible = False
                '       RawFlag = False
                '     Endif
                '
                '   Case Asc("a"), Asc("A") ' Select/Unselect All
                '     SelectMode = True
                '     For Each aEnty In gcd.currentDrawing.arrEntities
                '       If aEnty.Selected Then
                '         SelectMode = False
                '         Break
                '       Endif
                '     Next
                '
                '     If SelectMode Then
                '       For Each aEnty In gcd.currentDrawing.arrEntities
                '         If aEnty.Selected = False Then
                '           aEnty.Selected = True
                '         Endif
                '       Next
                '     Else
                '       For Each aEnty In gcd.currentDrawing.arrEntities
                '         If aEnty.Selected Then
                '           aEnty.Selected = False
                '         Endif
                '       Next
                '     Endif
                '     fMain.regen
                '
                '   Case Asc("z"), Asc("Z") ' Undo
                '
                '     If gcd.currentDrawing.arrUndo.Count > 0 Then
                '       umx = gcd.currentDrawing.arrUndo.Max
                '
                '       uEnty = gcd.currentDrawing.arrUndo[umx]
                '       For Each aEnty In gcd.currentDrawing.arrEntities
                '         If aEnty.Handle = uEnty.Handle Then
                '           gcd.currentDrawing.arrEntities.Remove(imx, 1)
                '           gcd.currentDrawing.arrEntities.Add(uEnty, imx)
                '           gcd.currentDrawing.arrUndo.Remove(umx, 1)
                '           fMain.regen
                '           'gcd.Redraw
                '           Break
                '         Endif
                '         Inc imx
                '       Next
                '
                '     Endif
                '   Case Else
                '     KeysAccumulator = ""
                '
                ' End Select

            Else
                KeysAccumulator &= Key.Text
                DrawingAids.ErrorMessage = ""
            Endif

    End Select

    'DrawingAids.DibujaHelper

End

Public Sub tbnOrtho_Click()

    gcd.Orthogonal = tbnOrtho.value
    If tbnOrtho.Value Then
        tbnOrtho.foreground = Color.Blue
        tbnOrtho.Font.Bold = True
    Else
        tbnOrtho.foreground = Color.Buttonforeground
        tbnOrtho.Font.Bold = False
    Endif

End

Public Sub tbnSnap_Click()

    If tbnSnap.Value Then
        gcd.SnapMode = gcd.SnapModePrev
        tbnSnap.foreground = Color.DarkGreen
        tbnSnap.Font.Bold = True
    Else
        gcd.SnapModePrev = gcd.SnapMode
        gcd.SnapMode = -1
        tbnSnap.foreground = Color.Buttonforeground
        tbnSnap.Font.Bold = False
    Endif

End

Public Sub tbnGrid_Click()

    If tbnGrid.Value Then
        gcd.GridMode = gcd.GridModePrev
        tbnGrid.foreground = Color.DarkGray
        tbnGrid.Font.Bold = True
    Else
        gcd.GridModePrev = gcd.GridMode
        gcd.GridMode = -1
        tbnGrid.foreground = Color.Buttonforeground
        tbnGrid.Font.Bold = False
    Endif

End
'
' Public Sub lblCommand_KeyPress()
'
'     ' las teclas que no procese fMain sera procesadas aqui
'     KeysAccumulator &= Key.Text
'
' End

' Public Sub tbLayerForm_Click()
'
'     fLayersOnScreen.Move(tbLayerForm.ScreenX, tbLayerForm.ScreenY + tbLayerForm.h)
'     fLayersOnScreen.Show()
'
' End

Public Sub grdLayers_Click()

    If flgShowingLayers Then
        fLayersOnScreen.Hide
        flgShowingLayers = False

    Else
        If grdLayers.Column = 1 Then ' Visibility
            gcd.currentDrawing.CurrLayer.Visible = Not gcd.currentDrawing.CurrLayer.Visible

            If gcd.currentDrawing.CurrLayer.Visible Then grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOn Else grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOff

        Else If grdLayers.Column = 2 Then ' frozen
            gcd.currentDrawing.CurrLayer.Frozen = Not gcd.currentDrawing.CurrLayer.Frozen

            If gcd.currentDrawing.CurrLayer.Frozen Then grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOn Else grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOff

        Else If grdLayers.Column = 3 Then ' lock
            gcd.currentDrawing.CurrLayer.Locked = Not gcd.currentDrawing.CurrLayer.Locked

            If gcd.currentDrawing.CurrLayer.Locked Then grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOn Else grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOff

        Else
            fLayersOnScreen.Move(grdLayers.ScreenX, grdLayers.ScreenY + grdLayers.h + 1)
            flgShowingLayers = True
            fLayersOnScreen.Show()
        End If
    End If

End

Public Sub FillWindowMenu()

    Dim d As Drawing
    Dim mItem As Menu

    mnuWindow.Children.Clear

    For Each d In gcd.Drawings
        mItem = New Menu(mnuWindow)
        mItem.Text = d.FileName
        If d = gcd.currentDrawing Then mItem.Checked = True Else mItem.Checked = False
        mItem.Action = "windowchange_" & d.FileName
    Next

    mItem = New Menu(mnuWindow)
    mItem.Text = "" ' separador

    ' y ahora agrego dos
    mItem = New Menu(mnuWindow)
    mItem.Text = ("Close")
    mItem.Action = "window_close"

    mItem = New Menu(mnuWindow)
    mItem.Text = ("Close all")
    mItem.Action = "window_closeall"

End

Public Sub cmbDimStyle_Click()

    gcd.currentDrawing.CurrDimStyle = gcd.FindStyle(cmbDimStyle.Text)

End
'
' Public Sub ToggleButton2_Click()
'
'     If Not ToggleButton2.Value Then
'         ToggleButton2.Tag = CStr(ToggleButton2.Parent.h)
'         ToggleButton2.Parent.h = ToggleButton2.H
'     Else
'
'         ToggleButton2.Parent.h = CInt(ToggleButton2.tag)
'     End If
'
' End

Public Sub ToggleButton1_Click()

    If Not ToggleButton1.Value Then
        ToggleButton1.Tag = CStr(ToggleButton1.Parent.h)
        'panel9.h = ToggleButton1.H
        'vbox2.h = 0

    Else
        'panel9.Visible = True

        'panel9.h = CInt(ToggleButton1.tag)
    End If

End

' Public Sub ToggleButton3_Click()
'
'     If Not ToggleButton3.Value Then
'         ToggleButton3.Tag = CStr(ToggleButton3.Parent.h)
'         ToggleButton3.Parent.h = ToggleButton3.H
'     Else
'
'         ToggleButton3.Parent.h = CInt(ToggleButton3.tag)
'     End If
'
' End
'
' Public Sub ToggleButton4_Click()
'
'     If Not ToggleButton4.Value Then
'         ToggleButton4.Tag = CStr(ToggleButton4.Parent.h)
'         ToggleButton4.Parent.h = ToggleButton4.H
'     Else
'
'         ToggleButton4.Parent.h = CInt(ToggleButton4.tag)
'     End If
'
' End

Public Sub DirView1_Click()

    Dim sFilename As String
    Dim imgPreview As Image
    Dim entScale As Float
    Dim entidad As Entity
    Dim sFActor As Float = 1.5

    ListView1.Clear
    For Each sFilename In Dir(DirView1.current, "*.dxf")
        imgPreview = New Image(80, 80, Color.Black)

        gcd.FitDxfToImage(DirView1.current &/ sFilename, imgPreview, gcd.flgWhiteAndBlack, 0)

        ListView1.Add(Left$(sFilename, -4), Left$(sFilename, -4), imgPreview.Picture)

    Next

End

Public Sub ListView1_DblClick()

    Dim sFilename As String
    Dim imgPreview As Image

    Dim entyBlock As New Entity[]
    Dim flxLimits As New Float[]
    Dim entScale As Float
    Dim aLayer As New Layer
    Dim entidad As Entity
    Dim sFActor As Float = 1.5

    sFilename = DirView1.current &/ ListView1.current.Text & ".dxf"

    ' For Each entidad In entyBlock
    '     entidad.pLayer = aLayer
    ' Next
    ' clsEntities.BuildPoi(entyBlock)

    'PanelBlockFit.Visible = True
    ListView1.Visible = False

    gcd.clsJobPrevious = gcd.clsJob
    gcd.clsJob = clsBlocks
    gcd.clsJob.Start(sFilename)

    '

End

Public Sub ListView1_DragMove()

    If Mouse.Left Then
        ListView1.Drag(ListView1.current.Picture.Image)
    Endif

End

Public Sub ListView1_Drag()

    Stop

End

Public Sub ListView1_DragLeave()

    Stop

End

Public Sub ListView1_Drop()

    Stop

End

Public Sub tmrAutosave_Timer()

    ' el autosave funciona solo si guarde antes, o sea si el dibujo tiene nombre
    ' ademas se guarda solo en formato dxf, para acelerar el proceso

    If Not gcd.currentDrawing.RequiresFileRename Then
        If gcd.currentDrawing.RequiresSaving Then
            If Dxf.SaveFile(gcd.currentDrawing.FileName & ".Autosave", gcd.currentDrawing.cModel) < 0 Then
                Print "Autosave error"
            Else
                Print ("Autosaved to ") & gcd.currentDrawing.FileName & ".Autosave"
            Endif
        End If
    End If

End

Public Sub tb11_Click()

End

Public Sub tbnInspector_MouseUp()

    If Mouse.Left Then

        Config.TrackShowInspector = Not Config.TrackShowInspector
        tbnInspector.Value = Config.TrackShowInspector
        If Not Config.TrackShowInspector Then
            Try fInspector.Close
        Endif

    Else If Mouse.Right Then

        fDetectOptions.Show()

    Endif

End

Public Sub tbnInspector_Click()

End

Public Sub tbnOrtho2_Click()

    gcd.DrawBounds = Not gcd.DrawBounds
    Me.redraw

End

Public Sub GLArea1_KeyPress()

    ' Debug "GLArea", Key.Text

End
