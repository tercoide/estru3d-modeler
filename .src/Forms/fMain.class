' Gambas class file

'------------------------------------------------------------------------------

'Variables del formulario

Public currentFile As String

Public CursorX As Integer
Public CursorY As Integer

Public Xr As Float
Public Yr As Float

Public KeysAccumulator As String
Public TmrTicks As Integer

'Public SelectedWidth As Boolean

'Private PropertiesFlag As Boolean = False
Private PropertiesFlag As Boolean = True
Private RawFlag As Boolean = False

'variables de ambiente
Public flgShowInspector As Boolean = False

Public flgShowingLayers As Boolean
Public flgNewPosition As Boolean        ' seteada cuando hay un cambio en pan o zoom

Public flgWheelCounter As Integer

Public $hDrawTimer As New Timer As "DrawTimer"
Public $hSearchTimer As New Timer As "SearchTimer"

' Block insertion vars
Public fBlockScaleX As Float = 1
Public fBlockScaleY As Float = 1
Public fBlockDegRotation As Float = 0

Public GridSpacing As Float = 0.5
Public GridActive As Boolean = False         ' use with F7: 0 = no grid, 1 = dots, 2 = lines

Public MyPrinter As Printer

Public ftring As New Float[]
Public ftring2 As New Float[]

Public Sub DrawTimer_Timer()

    Dim dx As Single, dy As Single
    Dim EjeX As Single, ejeY As Single, ejeZ As Single

    ' If mouDown Then
    '     If paneando Then
    '
    '         With modGraphics
    '             'ademas intento un zoom dinamico, si el mouse esta lejos del centro, atrae los graficos hacia el
    '             GLCam.StrafeRight((mouDownX - MouseX) * 0.001 * modgraphics.maxmax)
    '             GLCam.MoveUpward(-(mouDownY - Mousey) * 0.001 * modgraphics.maxmax)
    '             'Debug .pan.x, .pan.y, .escala
    '         End With
    '     Else If rotando Then
    '
    '         'veo para donde mueve el mouse con respenco a la posicion 2D del CG
    '
    '         dy = -(mouDownX - MouseX) * 0.075 '* mouDownXCG
    '         dx = -(mouDownY - MouseY) * 0.075 '* mouDownYCG
    '
    '         ' con esto la rotacion se hace de un eje a la vez
    '         If Abs(dy) > Abs(dx) Then
    '
    '             GLCam.RotateY(dy)
    '
    '         Else
    '
    '             GLCam.RotateX(dx)
    '
    '         End If
    '
    '     End If
    '
    '     'modGraphics.dibujar_estructura3D
    '
    '     mouDownX = Mouse.x
    '     mouDownY = Mouse.y
    '
    ' Else If mouWheel Then
    '
    '     GLCam.moveforward(mouDelta * modgraphics.maxmax / 20)
    '
    '     mouDelta = 0
    '     mouWheel = False
    '
    ' End If

    glarea1.Refresh

    '

End Sub

Public Sub SearchTimer_Timer()

    gcd.Drawing.HoveredEntity = clsMouseTracking.CheckAboveEntity(xr, yr)

End Sub

Public Sub Run() As Boolean

    ' acomodo el tamanio de los controles

    Me.mbtColors.w = 128
    'Me.mbtLayers.w = 128
    Me.cmbDimStyle.w = 128
    Me.grdLayers.w = 146
    'Me.tbnLayersOnScreen.w = 96

    'PanelBlockFit.Visible = False 'ag = CStr(PanelBlockFit.h)
    'PanelBlockFit.h = 0

    fMain.grdLayers.Rows.Count = 1
    fMain.grdLayers.Columns.Count = 5
    'fMain.grdLayers.Rows[0].Height = 32
    fMain.grdLayers.Rows.Height = 28
    fMain.grdLayers[0, 1].Alignment = Align.Left
    fMain.grdLayers[0, 2].Alignment = Align.Left
    fMain.grdLayers[0, 3].Alignment = Align.Left
    fMain.grdLayers[0, 4].Alignment = Align.Left
    fMain.grdLayers.Columns[0].w = 18 ' color
    fMain.grdLayers.Columns[1].w = 18 ' color
    fMain.grdLayers.Columns[2].w = 18 ' color
    fMain.grdLayers.Columns[3].w = 18 ' color
    fMain.grdLayers.Columns[4].w = 72 ' color

    fLayersOnScreen.Move(Me.grdLayers.x, Me.grdLayers.y + Me.grdLayers.h + 1)

    ' tblLines.AddToolButton("tblLine",, Picture.Load(main.Params["Dirs/PNG", Application.Path &/ "png/48x48"] &/ "line.png"), "cadLine")
    ' tblLines.AddToolButton("tblLWPolyline",, Picture.Load(main.Params["Dirs/PNG", Application.Path &/ "png/48x48"] &/ "hexagon.png"), "cadlwpolyline")
    '
    ' tblLines.AddToolButton("tblText",, Picture.Load(main.Params["Dirs/PNG", Application.Path &/ "png/"] &/ "Copy.png"), "cadText")
    '
    ' ' Armo la barra Inquiry
    '
    ' tblInquiry.AddToolButton("tblArea", "A",, "cadarea")
    ' tblInquiry.AddToolButton("tblRuler", "R",, "cadruler")
    ' tblInquiry.AddToolButton("tblProtracto", "P",, "cadprotractor")

    Action_Activate("file_new")

    'tmrAutosave.Delay = main.Params["/AutoSaveDelayMin", 15] * 1000 * 60
    'tmrAutosave.Enabled = True

    Me.Show()
    gcd.DrawingReady = True

    ' instancio la clase Task que maneja el mouse tracking

End

' Public Sub tskMouseTracking_Error(mydata As String)
'
'     Print "Task error", mydata
'
' End
'
' Public Sub mytask_Error(mydata As String)
'
'     Print "Task error", mydata
'
' End

' Public Sub tskMouseTracking_Read(mydata As String)
'
'     Print "Task returns", mydata, tskMouseTracking.Value
'
' End
'
' Public Sub mytask_Read(mydata As String)
'
'     Print "Task returns", mydata, tskMouseTracking.Value
'
' End

' Public Sub Printer1_Draw()
'
'     Dim i As Integer
'     Dim flxLimits As New Float[]
'     Dim scaleX, scale, scaleY As Float
'
'     flxLimits = clsEntities.ComputeLimits(gcd.drawing.arrEntities, True)
'
'     Debug "Printing"
'
'     ' trato de meter centrado
'     scaleX = (flxLimits[2] - flxLimits[0]) / Paint.w 'Printer1.PaperWidth
'     scaleY = (flxLimits[3] - flxLimits[1]) / Paint.h 'Printer1.PaperHeight
'
'     If scaleX > scaleY Then Scale = scaleX Else Scale = scaley
'
'     Paint.Scale(1 / scale, -1 / scale)
'     Paint.Translate(0, -1 * (flxLimits[3] - flxLimits[1]))
'     For i = 0 To gcd.drawing.arrLayers.Max
'         If gcd.drawing.arrLayers[i].Visible Then
'             For Each e As Entity In gcd.drawing.arrLayers[i].Entities
'                 e.ClassHandler.draw2(e)
'             Next
'         End If
'     Next
'
'     Debug "Print done"
'
' End

Public Function Action_Activate(sAction As String) As Boolean
    ' Acciones de los botones y los menús (para no repetir código)
    ' El string de la acción es una propiedad de cada botón o menú
    ' El código que se ejecuta lo hace dentro de la rutina llamada, nunca dentro de este mismo evento.

    Dim r As Float
    Dim NewDrawing As Drawing
    Dim f, fDxf, fBak As String
    'Dim fMinimal As String = "./minimal/minimal-2010.dxf"
    Dim fMinimal As String = "./minimal/minimal.dxf"
    Dim fx As String[]
    Dim fbas As String
    Dim sWName As String
    Dim t As String
    Dim iColor, i As Integer
    Dim imgCirculito As Image
    Dim clsJob As String
    Dim d As Drawing
    Dim sActionParams As String[]

    Try gcd.debuginfo(Last.name)

    Select Case LCase(sAction)

        Case Like "_*"
            ' todo lo que empiece con _ lo envio al job
            gcd.clsJob.KeyText(Mid(sAction, 2))
        Case "mentities-copy"
            Dim sToCopy As String
            For Each e As Entity In gcd.Drawing.oSelected
                sToCopy &= clsEntities.EntityToJsonString(e)

            Next

            Clipboard.Clear
            Clipboard.Copy(sToCopy)

        Case "undo"

            gcd.Drawing.uUndo.DoUndo()
            gcd.Regen

        Case "redo"

            gcd.Drawing.uUndo.DoRedo()
            gcd.Regen
        Case "config"

            fOptions.ShowModal
            Me.tabDrawings[0].Visible = Config.ShowConsoleTab
            glPlus.ClearColor(Config.BackgroundColor)

        Case "exit"

            form_Close

        Case "regen"

            gcd.Regen

            ' Case "pdf_export"
            '
            '     If Printer1.Configure() Then Return
            '     Printer1.Print
        Case "print"

            If Not gcd.Drawing.CurrPrintStyle Then gcd.Drawing.CurrPrintStyle = New PrintStyle
            fPrint.run()
            ' If i = 1 Then
            '
            '     Printer1.Print
            ' Else If i = 0 Then
            '     gcd.debugInfo("Print cancelled")
            '
            ' Else If i = 2 Then
            '     gcd.debugInfo("Selecting what to print")
            '
            ' End If

            ' vemos si hay q imprimir algo

        Case "undo"
            gcd.Drawing.uUndo.DoUndo()
            gcd.Regen

        Case "about"
            i = fAbout.ShowModal()

            ' Case "redo"
            '     gcd.Drawing.uUndo.DoRedo()
            '     gcd.Regen
        Case "window_close"
            For i = 0 To gcd.Drawings.Count
                If gcd.Drawings[i] = gcd.Drawing Then
                    gcd.Drawings.Remove(i)
                    If gcd.Drawings.Count > 0 Then
                        gcd.Drawing = gcd.Drawings[0]
                        Redraw
                    Else

                        Action_Activate("file_new")
                    Endif
                    Break
                End If

            Next

        Case "window_closeall"
            gcd.Drawings.Clear
            Action_Activate("file_new")

        Case Like "windowchange_*"

            sWName = Mid(sAction, 14)

            For Each d In gcd.Drawings
                If sWName = d.FileName Then
                    gcd.Drawing = d
                    gcd.UpdateLayersCombo
                    gcd.UpdateLineWtCombo
                    gcd.UpdateLineTypeCombo
                    gcd.UpdatDimTypeTypeCombo
                    Me.redraw
                    Me.Text = f

                    'FillWindowMenu
                    Break
                Endif
            Next

        Case "file_quit"

            Me.Close
            Quit

            ' Case "file_new"
            '
            '     actions.FileNew
            '
        Case "file_open"

            actions.FileOpen

        Case Like "file_open_*"

            sWName = Mid(sAction, 11)

            actions.FileOpen(sWName)

        Case "file_save"

            f = gcd.Drawing.FileName
            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"
            If gcd.Drawing.RequiresFileRename Then
                Me.Action_Activate("file_saveas")
                Return
            Else
                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                If File.Ext(f) = "dxf" Then
                    Dxf.SaveFile(f, gcd.Drawing)
                Else If File.Ext(f) = "dwg" Then
                    ' guardamos la version DXF en el dir adecuado, con el nombre elegido
                    't = main.dirDxfOut &/ Utils.FileWithoutExtension(Utils.FileFromPath(f)) & ".dxf"
                    t = Temp & ".dxf"
                    Dxf.SaveFile(t, gcd.Drawing)
                    t = gcd.oda_dxftodwg(t)
                    ' como el proceso de grabado pudo resultar en error, chequeo la existencia primero

                    If Exist(t) Then Move t To f

                End If

            Endif

        Case "file_saveas"

            f = gcd.Drawing.FileName
            fbas = File.Dir(f) &/ File.BaseName(f)
            fBak = "'" & fbas & ".bak'"

            Dialog.AutoExt = True
            Dialog.Filter = ["*.dxf", "DXF Drawing exchange 2010", "*.dwg", "DWG AutoCAD Drawing file 2010"]
            If Dialog.SaveFile() Then Return ' cancel saving

            f = Dialog.Path

            If Exist(f) Then
                If Message.Question(("The file exist"), ("Replace"), ("Cancel")) = 2 Then
                    f = ""
                Endif
            Endif

            If f = "" Then
                Print "Cancel"
            Else

                'If LCase(File.Ext(f)) <> "dxf" Then f &= ".dxf"
                If Exist(f) Then
                    If Exist(fBak) Then Shell "rm " & fBak Wait
                    Shell "mv '" & f & "' '" & fbas & ".bak'" Wait
                End If

                gcd.Drawing.FileName = f
                gcd.Drawing.RequiresFileRename = False
                Action_Activate("file_save")

                Me.Text = f

            Endif

        Case Like "cad*"

            ' actions, with & for additional parameters
            ' cadDimension_Linear&horizontal

            Dim o As Object, sRunWith As String, iParam As Integer, c As Class

            sActionParams = Split(sAction, "&")
            sRunWith = UCase(Mid(sActionParams[0], 4))
            Try iParam = CInt(sActionParams[1])

            o = gcd.CCC[sRunWith]
            If Not o Then Return
            gcd.clsJobPrevious = gcd.clsJob
            ' check if the class needs to be run trough other class
            If o.usewith = "" Then                        ' its a tool
                gcd.clsJob = o
                gcd.clsJob.start(iParam)

            Else                                           ' its propably an eentity

                gcd.clsJob = gcd.CCC[o.usewith]
                gcd.clsJob.start(o, iParam)

            End If

        Case Like "layer_change_*"

            Dim sLayerName As String

            sLayerName = Mid(sAction, 14)

            ' mbtLayers.Text = sLayerName
            ' iColor = gcd.Drawing.cLayers[sLayerName][dxf.codColor]
            ' mbtLayers.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            ' informamos
            gcd.Drawing.CurrLayer = gcd.GetLayer(sLayerName)

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("layer", gcd.Drawing.CurrLayer)

            clsEntities.DeSelection()

        Case Like "color_*"

            iColor = CInt(Mid(sAction, 7))
            mbtColors.Text = "Color " & CStr(iColor) 'Me.mbtColors.Children[iColor].Text
            If iColor = 256 Then mbtColors.Text = "ByLayer"
            If iColor = 257 Then mbtColors.Text = "ByBlock"

            mbtColors.Picture = paintPlus.picCirculito(8, gcd.gColor[iColor], Color.ButtonForeground)

            gcd.Drawing.CurrColor = iColor

            ' si tengo algo seleccionado, debo cambiar su color a este
            gcd.EditEntities("color", iColor)
            clsEntities.DeSelection()

        Case "more_colors"

            iColor = fColors.ShowModal()
            If iColor < 0 Then Return

            Me.Action_Activate("color_" & CStr(iColor))

        Case Like "linewt_change_*"

            gcd.Drawing.CurrLineWt = CInt(Mid(sAction, 15)) / 100

            gcd.EditEntities("linewt", gcd.Drawing.CurrLineWt)
            clsEntities.DeSelection()

        Case Like "ltype_change_*"

            gcd.Drawing.CurrLineType = gcd.FindLType(Mid(sAction, 14))

            gcd.EditEntities("linetype", gcd.Drawing.CurrLineType)
            clsEntities.DeSelection()

        Case "grid"
            Me.GridActive = Not Me.GridActive

        Case "ortho"
            gcd.Orthogonal = Not gcd.Orthogonal
        Case "snap"
            gcd.SnapMode = -gcd.SnapMode

    End Select

End

Public Sub Form_Activate()

    GLplus.Init(glarea1)

End

Public Sub GuardarParametros()

    If main.setting.lastopen1 <> "" Then main.params["Files/LastOpen1"] = main.setting.lastopen1
    If main.setting.lastopen2 <> "" Then main.params["Files/LastOpen2"] = main.setting.lastopen2
    If main.setting.lastopen3 <> "" Then main.params["Files/LastOpen3"] = main.setting.lastopen3
    If main.setting.lastopen4 <> "" Then main.params["Files/LastOpen4"] = main.setting.lastopen4
    If main.setting.lastopen5 <> "" Then main.params["Files/LastOpen5"] = main.setting.lastopen5

End

Public Sub form_Close()

    Me.Close

End

Public Sub glarea1_Resize()

    GLplus.Resize(glarea1)

End

Public Sub GLArea1_draw()

    Dim iParent As Integer
    Dim i As Integer
    Dim L As Layer

    If Not gcd.DrawingReady Then Return

    gcd.drwDrawingClass = gcd.drwOpenGLClass

    gl.Clear(gl.DEPTH_BUFFER_BIT Or gl.COLOR_BUFFER_BIT)

    gl.LoadIdentity

    gl.Translatef(gcd.Drawing.PanX, gcd.Drawing.PanY, 0)

    gl.Scalef(gcd.Drawing.ScaleZoom, gcd.Drawing.ScaleZoom, 1)

    ' el orden del dibujo es importante en paint, porque una cosa tapa a la otra; en openGL aparentemente es al reves, lo primero se dibuja primero

    ' Primero la grid
    ' DrawingAids.DrawGrid

    ' ' TEST
    ' Dim fArcParams As Float[]
    '
    ' ' aqui podria usar una rutina de arco entre 3 puntos
    ' fArcParams = puntos.Arc3Point(0, 0, -100, 50, -300, 20)
    ' ' traslado el centro
    ' gl.Translatef(fArcParams[0], fArcParams[1], 0)
    ' glPlus.ARC(fArcParams[2], fArcParams[3], fArcParams[4] - fArcParams[3], Color.Blue, 1, 0)
    ' gl.Translatef(-fArcParams[0], -fArcParams[1], 0)
    ' fArcParams = Null
    '
    If gcd.DrawBounds Then DrawingAids.DrawPolygons

    ' glPlus.Triangles(ftring, Color.Red, Color.Red)
    '
    ' glPlus.Triangles(ftring2, Color.Blue, Color.blue)
    ' en este momento le damos la posibilidad a la clase actuante a que dibuje lo que quiera

    ' If gcd.Drawing.HoveredEntityPrevious Then
    '     ' si no esta seleccionada, la resalto
    '     'If Not arrEntities[iEntity[3]].Selected Then
    '     'iParent = clsEntities.GetParentBlock(gcd.Drawing.iEntity[3]) ' esto verifica si tiene que resaltar el bloque completo
    '
    '     If gcd.DrawHoveredEntity Then gl.CallList(gcd.Drawing.HoveredEntityPrevious.glDrwListRemark)
    '     '     Gcd.CCC[gcd.Drawing.HoveredEntityPrevious.gender].DrawRemark(gcd.Drawing.HoveredEntityPrevious)
    '     ' End If
    ' End If

    If gcd.DrawHoveredEntity Then
        If gcd.Drawing.HoveredEntity Then gl.CallList(gcd.Drawing.HoveredEntity.glDrwListRemark)
    End If
    DrawingAids.DrawCoordenadas

    DrawingAids.DibujaHelper

    gl.CallList(gcd.Drawing.GlListSelectedEntities)

    For Each L In gcd.Drawing.oLayers
        If L.Visible Then gl.CallList(L.glList)
    Next

    gcd.clsJob.Draw()
    '
    'clsEntities.DrawArrays()

    ' POI dinamicos
    If gcd.Drawing.flgShowPOIinfo Then

        Select gcd.Drawing.iEntity[2]
            Case gcd.poiMidPoint
                glPlus.PolygonFilled([gcd.Drawing.iEntity[0] - gcd.Metros(4), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] + gcd.Metros(4), gcd.Drawing.iEntity[0] + gcd.Metros(4), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] - gcd.Metros(4)], Color.Blue, Color.Green)
            Case gcd.poiQuadrant
                glPlus.PolygonFilled([gcd.Drawing.iEntity[0] - gcd.Metros(6), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] + gcd.Metros(6), gcd.Drawing.iEntity[0] + gcd.Metros(6), gcd.Drawing.iEntity[1], gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1] - gcd.Metros(6)], Color.Cyan, Color.Cyan)

            Case 0
                ' nada
            Case gcd.poiCenter, gcd.poiBasePoint

                glPlus.CIRCLE([gcd.Drawing.iEntity[0], gcd.Drawing.iEntity[1]], gcd.Metros(4), Color.Cyan, True, False)
                'glPlus.Rectangle2D(gcd.Drawing.iEntity[0] - gcd.Metros(4), gcd.Drawing.iEntity[1] - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1, 1)

            Case Else
                glPlus.Rectangle2D(gcd.Drawing.iEntity[0] - gcd.Metros(4), gcd.Drawing.iEntity[1] - gcd.Metros(4), gcd.Metros(8), gcd.Metros(8), Color.Blue,,,, Color.Blue, 1, 1)
        End Select

    Endif

    If gcd.flgNewPosition Then
        clsEntities.CollectVisibleEntities
        gcd.flgNewPosition = False
    End If

End

' NUEVO Protocolo del Mouse para OpenGL: todo se envia a la clsJob actuante

Public Sub GLArea1_MouseDown()

    gcd.clsJob.mouseDown()

End

Public Sub GLArea1_DblClick()

    gcd.clsJob.DblClick()

End

Public Sub GLArea1_MouseMove()

    If Not gcd.clsJob Then Return
    Xr = gcd.Xreal(Mouse.x)
    Yr = gcd.Yreal(Mouse.y)

    ' Universal:
    gcd.clsJob.MouseMove()

    Me.lblCoord.Text = Format(Xr, Config.FormatCoord) & " : " & Format(Yr, config.FormatInquiries)

    If Mouse.Middle Then
        cadPan.MouseMove()
    Else If Mouse.Left Then

    Else If Mouse.Right Then

    Else
        ' If gcd.flgsearchingallowed Then
        '     gcd.Drawing.HoveredEntity = clsMouseTracking.CheckAboveEntity(Xr, Yr)
        '     If gcd.Drawing.HoveredEntity Then gcd.redraw
        '     ' If gcd.Drawing.HoveredEntityPrevious <> gcd.Drawing.HoveredEntity Then
        '     '     gcd.Drawing.HoveredEntityPrevious = gcd.Drawing.HoveredEntity
        '     '     gcd.Drawing.HoveredEntity = Null
        '     '
        '     ' Endif
        ' End If
        ReSearch

    End If

    '   If gcd.clsJob.gender <> "Pan" Then
    '     gcd.clsJobPreZoom = gcd.clsJob
    '     gcd.clsJob = cadPan
    '     gcd.clsJob.Start()
    '     ' glarea1.Refresh  ' glarea1.Refresh
    '     '
    '     '
    '   Else
    '
    '     gcd.clsJob = gcd.clsJobPreZoom
    '
    '   End If
    '
    ' End If

End

Public Sub ReSearch()

    $hSearchTimer.Trigger
    Wait 0.001

End

Public Sub GLArea1_MouseUp()

    gcd.clsJob.MouseUp()

End

Public Sub GLArea1_MouseWheel()

    gcd.clsJob.MouseWHEEL()

End

Public Function Xreal(ScreenX As Float) As Float

    Return Metros((screenx - glarea1.w / 2 - gcd.drawing.PanX))

End

Public Function Yreal(ScreenY As Float) As Float

    Return Metros((-ScreenY + glarea1.h / 2 - gcd.drawing.PanY))

End

Public Function XPix(X As Float) As Float

    'Return Metros((screenx - glarea1.w / 2 - gcd.drawing.PanX))
    Return Me.Pixels(X) + glarea1.w / 2 + gcd.drawing.PanX

End

Public Function YPix(Y As Float) As Float

    'Return Metros((-ScreenY + glarea1.h / 2 - gcd.drawing.PanY))
    Return -(Me.Pixels(Y) - glarea1.h / 2 + gcd.drawing.PanY)

End

Public Function Pixels(distancia As Float) As Float  ' converts meters to pixels
    ' transforma Metros en Pixeles sin tener en cuenta el Pan

    Return distancia * gcd.drawing.ScaleZoom

End

Public Function Metros(pixeles As Integer) As Float  ' converts pixels to meters

    Return pixeles / gcd.drawing.ScaleZoom

End

Public Function Near(xyzReal As Float) As Float
    ' return the nearest point to the grid
    ' this is a world to world points (not pixels)

    ' Example:
    ' if                    GridSpacing = 0.2
    ' we pass               xyzReal = 1.35
    ' function will give    NearReal = 1.40

    Dim n As Integer, r As Float

    If Not Gridactive Then Return xyzReal

    r = xyzReal / GridSpacing
    n = Int(r)
    r = r - Int(r)

    If r > 0.5 Then n += 1

    Return n * GridSpacing

End

Public Sub redraw()

    $hDrawTimer.Trigger
    Wait 0.001

End

Public Sub Form_Keypress()

    Dim com As Variant
    Dim umx As Integer     '' Index in undo array
    Dim uEnty As Entity    '' Undo entity
    Dim aEnty, e As Entity    '' Actual entity
    Dim imx As Integer     '' Index in Entities array
    Dim SelectMode As Boolean

    ' Print Key.Code
    Dim t As Float = Timer
    Dim ftring2 As Float[]
    Dim a As Integer
    Dim oki As Integer

    Select Key.Code

        Case Key.Enter, Key.Return
            Debug KeysAccumulator

            '            Form_Activate()

            gcd.clsJob.KeyText(KeysAccumulator)
            KeysAccumulator = ""

        Case Key.f2
            ' t = Timer
            ' Dim NE As New Entity
            ' Debug "Creando 500.000 lineas"
            ' For a = 1 To 500000
            '     NE = cadLine.NewEntity([Rnd(-100, 100), Rnd(-100, -100), Rnd(100, 100), Rnd(100, 100)])
            '     NE.ClassHandler.finish(ne)
            '     gcd.drawing.oEntities.Add(ne, ne.Handle)
            '
            ' Next
            ' Debug "Creadas", Timer - t
            ' t = Timer
            ' gcd.FillLayers()
            ' gcd.Regen
            ' cadZoomE.Start()
            ' clsEntities.CollectVisibleEntities
            '
            ' Debug "Regen en ", Timer - t
            ' Dim oka As Boolean
            ' t = Timer
            ' For Each NE In gcd.drawing.oEntities
            '     oka = NE.ClassHandler.MouseOverMe(NE, 2000, 2000, 10)
            ' Next
            ' Debug "Tracking via ClassHandler en ", Timer - t
            '
            ' t = Timer
            '
            ' NE = clsMouseTracking.CheckAboveEntity(2000, 2000, 10)
            '
            ' Debug "Tracking via clsMouseTRacking en ", Timer - t
            '
            ' ' lleno poi
            ' t = Timer
            ' For Each NE In gcd.drawing.oEntities
            '     Inc a
            '     gcd.drawing.poiLines.Insert(NE.p.Copy())
            '     gcd.drawing.oExtras.Add(ne.Handle, Str(a))
            ' Next
            ' Debug "Llenado del POI en ", Timer - t
            ' t = Timer
            ' a = puntos.inPolySegment(gcd.drawing.poiLines, 2000, 2000, 10)
            ' Debug "Busqueda via POI en ", Timer - t
            ' Stop
            ' ftring = puntos.PolygonTriangulation3([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'ftring2 = puntos.PolygonTriangulation([185, -315, 185, -295, 179, -295, 179, -296, 184, -296, 184, -314, 179, -314, 179, -315])

            'puntos.Translate(ftring2, 80, 0)

        Case Key.f6

            gcd.DrawBounds = Not gcd.DrawBounds
            Me.redraw

        Case Key.BackSpace

            KeysAccumulator = Left(KeysAccumulator, -1)

        Case Key.f8

            ' Debug "Entidades transferidas en  ", Timer - t

            gcd.Orthogonal = Not gcd.Orthogonal

            tbnOrtho.Value = gcd.Orthogonal

        Case Key.f7
            ' If btnGrid.Value = False Then
            '   puntos.Gridactive = True
            ' Else
            '   puntos.Gridactive = False
            ' Endif
            ' btnGrid.Value = puntos.Gridactive

        Case Key.F11

        Case Key.Esc

            If gcd.clsJob.gender = "Builder" Then

                gcd.clsJob.KeyText("U")

            Else If gcd.clsJob.gender = "Default" Then

                gcd.clsJob = gcd.clsJobPrevious
                gcd.clsJob.Start()

            Else    ' es una tool

                gcd.clsJob.finish
                gcd.clsJobPrevious = gcd.clsJob
                gcd.clsJob = cadSelection

            Endif

            ' SelectionRefresh()

        Case Key.Space
            Stop Event

        Case Key.Del
            gcd.clsJob.KeyText("Erase")

        Case Key.ControlKey
            KeysAccumulator = "Function"

        Case Else
            ' A GOOD KEY
            If InStr(KeysAccumulator, "Function") > 0 Then

                ' Select Key.Code
                '   Case Asc("1") ' Properties
                '
                '     Select PropertiesFlag
                '       Case 1 ' Tools
                '         PropertiesFlag = 2
                '         pnlProperties.Visible = True
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = False
                '       Case 2 ' Props
                '         PropertiesFlag = 0
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = False
                '         'btnSelectionMode.Value = True
                '
                '       Case Else ' Invisible
                '         PropertiesFlag = 1
                '         pnlProperties.Visible = False
                '         pnlIcons.Visible = True
                '
                '     End Select
                '
                '     If PropertiesFlag = False Then
                '       pnlProperties.Visible = True
                '       PropertiesFlag = True
                '       pnlIcons.Visible = False
                '       btnSelectionMode.Value = False
                '     Else
                '       pnlProperties.Visible = False
                '       PropertiesFlag = False
                '       pnlIcons.Visible = True
                '       btnSelectionMode.Value = True
                '     Endif
                '
                '   Case Asc("2") ' Layers
                '
                '     'Case Asc("3") ' Blocks
                '
                '     'Case Asc("4...") ' More...
                '     'KeysAccumulator &= "-" & Key.Text
                '     'Case Else
                '     '    KeysAccumulator = ""
                '     'pnlProperties.Visible = False
                '     'pnlDebug.Visible = False
                '
                '   Case Asc("3") ' Raw properties for debuging
                '     If RawFlag = False Then
                '       pnlRaw.Visible = True
                '       RawFlag = True
                '     Else
                '       pnlRaw.Visible = False
                '       RawFlag = False
                '     Endif
                '
                '   Case Asc("a"), Asc("A") ' Select/Unselect All
                '     SelectMode = True
                '     For Each aEnty In gcd.drawing.arrEntities
                '       If aEnty.Selected Then
                '         SelectMode = False
                '         Break
                '       Endif
                '     Next
                '
                '     If SelectMode Then
                '       For Each aEnty In gcd.drawing.arrEntities
                '         If aEnty.Selected = False Then
                '           aEnty.Selected = True
                '         Endif
                '       Next
                '     Else
                '       For Each aEnty In gcd.drawing.arrEntities
                '         If aEnty.Selected Then
                '           aEnty.Selected = False
                '         Endif
                '       Next
                '     Endif
                '     fMain.regen
                '
                '   Case Asc("z"), Asc("Z") ' Undo
                '
                '     If gcd.drawing.arrUndo.Count > 0 Then
                '       umx = gcd.drawing.arrUndo.Max
                '
                '       uEnty = gcd.drawing.arrUndo[umx]
                '       For Each aEnty In gcd.drawing.arrEntities
                '         If aEnty.Handle = uEnty.Handle Then
                '           gcd.drawing.arrEntities.Remove(imx, 1)
                '           gcd.drawing.arrEntities.Add(uEnty, imx)
                '           gcd.drawing.arrUndo.Remove(umx, 1)
                '           fMain.regen
                '           'gcd.Redraw
                '           Break
                '         Endif
                '         Inc imx
                '       Next
                '
                '     Endif
                '   Case Else
                '     KeysAccumulator = ""
                '
                ' End Select

            Else
                KeysAccumulator &= Key.Text
                ' DrawingAids.ErrorMessage = ""
            Endif

    End Select

    'DrawingAids.DibujaHelper

End

Public Sub tbnOrtho_Click()

    gcd.Orthogonal = tbnOrtho.value
    If tbnOrtho.Value Then
        tbnOrtho.foreground = Color.Blue
        tbnOrtho.Font.Bold = True
    Else
        tbnOrtho.foreground = Color.Buttonforeground
        tbnOrtho.Font.Bold = False
    Endif

End

Public Sub tbnSnap_Click()

    If tbnSnap.Value Then
        gcd.SnapMode = gcd.SnapModePrev
        tbnSnap.foreground = Color.DarkGreen
        tbnSnap.Font.Bold = True
    Else
        gcd.SnapModePrev = gcd.SnapMode
        gcd.SnapMode = -1
        tbnSnap.foreground = Color.Buttonforeground
        tbnSnap.Font.Bold = False
    Endif

End

Public Sub tbnGrid_Click()

    If tbnGrid.Value Then
        gcd.GridMode = gcd.GridModePrev
        tbnGrid.foreground = Color.DarkGray
        tbnGrid.Font.Bold = True
    Else
        gcd.GridModePrev = gcd.GridMode
        gcd.GridMode = -1
        tbnGrid.foreground = Color.Buttonforeground
        tbnGrid.Font.Bold = False
    Endif

End
'
' Public Sub lblCommand_KeyPress()
'
'     ' las teclas que no procese fMain sera procesadas aqui
'     KeysAccumulator &= Key.Text
'
' End

' Public Sub tbLayerForm_Click()
'
'     fLayersOnScreen.Move(tbLayerForm.ScreenX, tbLayerForm.ScreenY + tbLayerForm.h)
'     fLayersOnScreen.Show()
'
' End

Public Sub grdLayers_Click()

    If flgShowingLayers Then
        fLayersOnScreen.Hide
        flgShowingLayers = False

    Else
        If grdLayers.Column = 1 Then ' Visibility
            gcd.drawing.CurrLayer.Visible = Not gcd.drawing.CurrLayer.Visible

            If gcd.drawing.CurrLayer.Visible Then grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOn Else grdLayers[0, 1].Picture = fLayersOnScreen.picVisibleOff

        Else If grdLayers.Column = 2 Then ' frozen
            gcd.drawing.CurrLayer.Frozen = Not gcd.drawing.CurrLayer.Frozen

            If gcd.drawing.CurrLayer.Frozen Then grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOn Else grdLayers[0, 2].Picture = fLayersOnScreen.picFrozenOff

        Else If grdLayers.Column = 3 Then ' lock
            gcd.drawing.CurrLayer.Locked = Not gcd.drawing.CurrLayer.Locked

            If gcd.drawing.CurrLayer.Locked Then grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOn Else grdLayers[0, 3].Picture = fLayersOnScreen.picLockedOff

        Else
            fLayersOnScreen.Move(grdLayers.ScreenX, grdLayers.ScreenY + grdLayers.h + 1)
            flgShowingLayers = True
            fLayersOnScreen.Show()
        End If
    End If

End

Public Sub cmbDimStyle_Click()

    '    gcd.drawing.CurrDimStyle = gcd.FindStyle(cmbDimStyle.Text)

End
'
' Public Sub ToggleButton2_Click()
'
'     If Not ToggleButton2.Value Then
'         ToggleButton2.Tag = CStr(ToggleButton2.Parent.h)
'         ToggleButton2.Parent.h = ToggleButton2.H
'     Else
'
'         ToggleButton2.Parent.h = CInt(ToggleButton2.tag)
'     End If
'
' End

' Public Sub ToggleButton3_Click()
'
'     If Not ToggleButton3.Value Then
'         ToggleButton3.Tag = CStr(ToggleButton3.Parent.h)
'         ToggleButton3.Parent.h = ToggleButton3.H
'     Else
'
'         ToggleButton3.Parent.h = CInt(ToggleButton3.tag)
'     End If
'
' End
'
' Public Sub ToggleButton4_Click()
'
'     If Not ToggleButton4.Value Then
'         ToggleButton4.Tag = CStr(ToggleButton4.Parent.h)
'         ToggleButton4.Parent.h = ToggleButton4.H
'     Else
'
'         ToggleButton4.Parent.h = CInt(ToggleButton4.tag)
'     End If
'
' End

' Public Sub ListView1_DblClick()
'
'     Dim sFilename As String
'     Dim imgPreview As Image
'
'     Dim entyBlock As New Entity[]
'     Dim flxLimits As New Float[]
'     Dim entScale As Float
'     Dim aLayer As New Layer
'     Dim entidad As Entity
'     Dim sFActor As Float = 1.5
'
'     sFilename = DirView1.current &/ ListView1.current.Text & ".dxf"
'
'     ' For Each entidad In entyBlock
'     '     entidad.pLayer = aLayer
'     ' Next
'     ' clsEntities.BuildPoi(entyBlock)
'
'     'PanelBlockFit.Visible = True
'     ListView1.Visible = False
'
'     gcd.clsJobPrevious = gcd.clsJob
'     gcd.clsJob = clsBlocks
'     gcd.clsJob.Start(sFilename)
'
'     '
'
' End

Public Sub ListView1_Drag()

    Stop

End

Public Sub ListView1_DragLeave()

    Stop

End

Public Sub ListView1_Drop()

    Stop

End

Public Sub tmrAutosave_Timer()

    ' el autosave funciona solo si guarde antes, o sea si el dibujo tiene nombre
    ' ademas se guarda solo en formato dxf, para acelerar el proceso

    If Not gcd.drawing.RequiresFileRename Then
        If gcd.drawing.RequiresSaving Then
            If Dxf.SaveFile(gcd.drawing.FileName & ".Autosave", gcd.drawing.cModel) < 0 Then
                Print "Autosave error"
            Else
                Print ("Autosaved to ") & gcd.drawing.FileName & ".Autosave"
            Endif
        End If
    End If

End

Public Sub tb11_Click()

End

Public Sub tbnInspector_MouseUp()

    If Mouse.Left Then

        Config.TrackShowInspector = Not Config.TrackShowInspector
        tbnInspector.Value = Config.TrackShowInspector
        If Not Config.TrackShowInspector Then
            Try fInspector.Close
        Endif

    Else If Mouse.Right Then

        fDetectOptions.Show()

    Endif

End

Public Sub tbnInspector_Click()

End

Public Sub tbnOrtho2_Click()

    gcd.DrawBounds = Not gcd.DrawBounds
    Me.redraw

End

Public Sub GLArea1_KeyPress()

    ' Debug "GLArea", Key.Text

End

Public Sub ListView1_Click()

End

Public Function UpdatDimTypeTypeCombo()

    Dim oDimStyle As DimStyle
    Dim i As Integer

    If IsNull(gcd.Drawing.CurrDimStyle) Then gcd.Drawing.CurrDimStyle = gcd.Drawing.odimStyles[gcd.Drawing.odimStyles.First]
    fMain.cmbDimStyle.Clear
    For Each oDimStyle In gcd.Drawing.oDimStyles
        fMain.cmbDimStyle.Add(oDimStyle.name)

        If gcd.Drawing.CurrDimStyle.name = oDimStyle.name Then i = fMain.cmbDimStyle.Count
    Next
    If i = 0 Then i = 1
    fMain.cmbDimStyle.Index = i - 1

End
'' Transfer layers to main windows ComboBox

Public Sub UpdateLayersCombo()

    Dim i As Integer
    Dim sName As String = "_menuLay"
    Dim mLayer As New Menu(fMain), m2 As Menu
    Dim aLayer As Layer

    For i = 0 To fMain.Menus.Count - 1
        If fMain.Menus[i].Name = sName Then
            fMain.Menus[i].Delete
            Break
        End If
    Next
    mLayer.Name = sName
    For Each aLayer In gcd.Drawing.oLayers
        m2 = New Menu(mLayer)
        m2.Text = aLayer.Name
        m2.Picture = paintPlus.picCirculito(8, gcd.GetGBColor(aLayer.Colour), Color.ButtonForeground)
        m2.Action = "layer_change_" & aLayer.Name
    Next
    ' fMain.mbtLayers.Menu = sName
    ' fMain.mbtLayers.Text = mLayer.Children[0].Text
    ' fMain.mbtLayers.Picture = mLayer.Children[0].Picture
    If Not gcd.Drawing.CurrLayer Then gcd.Drawing.CurrLayer = gcd.Drawing.oLayers[gcd.Drawing.oLayers.First]

    fMain.grdLayers[0.0, 0.0].Picture = mLayer.Children[0].Picture
    fMain.grdLayers[0, 4].Text = gcd.Drawing.CurrLayer.Name
    fMain.grdLayers[0, 1].Picture = IIf(gcd.Drawing.CurrLayer.Visible, fLayersOnScreen.picVisibleOn, fLayersOnScreen.picVisibleOff)
    fMain.grdLayers[0, 2].Picture = IIf(gcd.Drawing.CurrLayer.Frozen, fLayersOnScreen.picFrozenOn, fLayersOnScreen.picFrozenOff)
    fMain.grdLayers[0, 3].Picture = IIf(gcd.Drawing.CurrLayer.Locked, fLayersOnScreen.picLockedOn, fLayersOnScreen.picLockedOff)

    ' fMain.tbnLayersOnScreen.Picture = paintPlus.picTexto(gcd.Drawing.arrLayers.First.Name, fMain.Font.H, fMain.tbnLayersOnScreen.w, fMain.tbnLayersOnScreen.h, Color.ButtonForeground, Color.ButtonBackground, Align.Left)

    Return

End

' '' Should be called after updating layers
Public Sub UpdateLineWtCombo()
    '
    '     Dim imagen As Image
    '
    '     Dim LW As Float
    '     Dim f As Float
    '
    '     ' lo vacio
    '
    '     fMain.tblLineWt.tbnChilds.Clear
    '
    '     ' primero agregamos la correspondiente a ByLayer
    '     imagen = New Image(fMain.tblLineWt.w * 0.9, fMain.tblLineWt.h * 0.9, fMain.tblLineWt.Background)
    '
    '     Paint.Begin(imagen)
    '     '  +------------------------------------+
    '     '  +   ---------------------  0.00mm    +
    '     '  +------------------------------------+
    '     Paint.MoveTo(0, imagen.h / 2)
    '     lw = gcd.Drawing.CurrLayer.LineWt '][dxf.codLWht] / 100 * 3
    '     Paint.LineWidth = lw
    '     If Paint.LineWidth < 1 Then Paint.LineWidth = 1
    '     Paint.RelLineTo(imagen.w / 2, 0)
    '     Paint.Stroke
    '     Paint.MoveTo(imagen.w / 10 * 5.5, imagen.h * 0.1)
    '     Paint.LineWidth = 1
    '     Paint.Text("ByLayer",,,, imagen.h * 0.6, Align.Left)
    '     Paint.Fill
    '     Paint.End
    '
    '     fMain.tblLineWt.AddToolButton("tbnLineWtByLayer",, imagen.Picture, "linewt_change_" & CStr(lw * 100))
    '
    '     ' ahora espesores especificos
    '     For f = 0.1 To 1.2 Step 0.1
    '         ' primero agregamos la correspondiente a ByLayer
    '         imagen = New Image(fMain.tblLineWt.w * 0.9, fMain.tblLineWt.h * 0.9, fMain.tblLineWt.Background)
    '
    '         Paint.Begin(imagen)
    '         Paint.AntiAlias = True
    '         '  +------------------------------------+
    '         '  +   ---------------------  0.00mm    +
    '         '  +------------------------------------+
    '         Paint.MoveTo(0, imagen.h / 2)
    '         lw = f * 3
    '         Paint.LineWidth = lw
    '         If Paint.LineWidth < 1 Then Paint.LineWidth = 1
    '         Paint.RelLineTo(imagen.w / 2, 0)
    '         Paint.Stroke
    '         Paint.MoveTo(imagen.w / 10 * 5.5, imagen.h * 0.1)
    '         Paint.LineWidth = 1
    '         Paint.Text(Format(f, "0.00mm"),,,, imagen.h * 0.6, Align.Left)
    '         Paint.Fill
    '         Paint.End
    '
    '         fMain.tblLineWt.AddToolButton("tbnLineWt" & CStr(f),, imagen.Picture, "linewt_change_" & CStr(lw * 100))
    '
    '     Next
    '
    '     '   test id[mm]
    '     ' # ¡DIV/0!	0	0
    '     ' 0, 05 1 0, 05
    '     ' 0, 09 2 0, 09
    '     ' 0, 1 3 0, 1
    '     ' 0, 13 4 0, 13
    '     ' 0, 15 5 0, 15
    '     ' 0, 18 6 0, 18
    '     ' 0, 2 7 0, 2
    '     ' 0, 25 8 0, 25
    '     ' 0, 3 9 0, 3
    '     ' 0, 35 10 0, 35
    '     ' 0, 4 11 0, 4
    '     ' 0, 45 12 0, 45
    '     ' 0, 5 13 0, 5
    '     ' 0, 53 14 0, 53
    '     ' 0, 6 15 0, 6
    '     ' 0, 65 16 0, 65
    '     ' 0, 7 17 0, 7
    '     ' 0, 8 18 0, 8
    '     ' 0, 9 19 0, 9
    '     ' 1 20 1
    '     ' 0, 4761904761905 21 1, 06
    '     ' 0, 9090909090909 22 1, 2
    '     ' 1, 304347826087 23 1, 4
    '     ' 1, 6666666666667 24 1, 58
    '     ' 2 25 2
    '     ' 	26 2, 11
    '     ' 	27
    '     ' 	28
    '     ' ByLayer 29
    '     ' ByBlock 30
    '     ' Default 31
    '

End
'

Public Sub UpdateLineTypeCombo()
    '
    '     ' se define en DXF con los codigos:
    '     ' 40 = largo total por tramo ( = suma de Abs(code 49) )
    '     ' 73 = numero de elementos (linea,espacio, punto) = 0 si es continua
    '     ' 49 = largo de cada elemento: 0 = dot, negativo = espacio, positivo = linea
    '     Dim imagen As Image
    '     Dim i As Integer
    '     Dim lty As LineType
    '
    '     '  +------------------------------------+
    '     '  + Phantom                            +
    '     '  + -- - -- - -- - -- - -- - -- - --   +
    '     '  +------------------------------------+
    '
    '     fMain.tblLTypes.tbnChilds.Clear
    '
    '     ' ahora espesores especificos
    '     For Each lty In gcd.Drawing.oLTYpes
    '         Inc i
    '
    '         ' primero agregamos la correspondiente a ByLayer
    '         imagen = New Image(fMain.tblLTypes.w * 0.9, fMain.tblLTypes.h * 0.9, fMain.tblLTypes.Background)
    '
    '         Paint.Begin(imagen)
    '         Paint.AntiAlias = True
    '         Paint.MoveTo(0, imagen.h * 0.8)
    '         Paint.LineWidth = 1
    '         Paint.Dash = lty.TrameLength
    '         Paint.RelLineTo(imagen.w, 0)
    '         Paint.Stroke
    '         Paint.Dash = Null
    '         ' Texto
    '         Paint.MoveTo(0, 0)
    '         Paint.LineWidth = 1
    '         Paint.Text(lty.Name,,,, imagen.h * 0.5, Align.topLeft)
    '         Paint.Fill
    '         Paint.End
    '
    '         fMain.tblLTypes.AddToolButton("tbnLType" & CStr(i),, imagen.Picture, "ltype_change_" & lty.Name)
    '
    '     Next
    '     gcd.Drawing.CurrLineType = gcd.Drawing.oLTYpes[gcd.Drawing.oLTYpes.First]
    '

End
'' Crea una nueva Tab para alojar un nuevo grafico

Public Function NewTabForDrawing(sName As String) As Drawing

    Dim i As Integer
    Dim nDrawing As New Drawing

    NDrawing.iEntity.Insert([0, 0, 0, 0])
    NDrawing.ScaleZoom = gcd.ScreenDensity

    Me.tabDrawings.Count += 1
    i = Me.tabDrawings.Count - 1
    Me.tabDrawings[i].Text = Left(Utils.FileFromPath(sName), 12)
    'Me.tabDrawings[i].Tooltip = sName
    Me.tabDrawings[i].Expand = True
    Me.tabDrawings[i].tag = nDrawing
    Me.tabDrawings.Index = i
    Dim tabFileNew As New TabPanel(Me.tabDrawings[i])
    tabFileNew.Count = 2
    tabFileNew.Expand = True
    tabFileNew.Arrangement = Arrange.Fill
    tabFileNew.Orientation = Align.Bottom

    tabFileNew[0].Text = "Model"
    tabFileNew[1].Text = "Paper"
    Dim glaFile As New GLArea(tabFileNew[0])
    glaFile.Background = Config.BackgroundColor
    glaFile.Expand = True
    glaFile.Tracking = True
    Object.Attach(glaFile, Me, "GLArea1")

    gcd.Drawing = nDrawing
    gcd.Drawing.GLAreaInUse = glaFile
    fmain.GLArea1 = gcd.Drawing.GLAreaInUse

    Me.Refresh

    Return nDrawing

End
