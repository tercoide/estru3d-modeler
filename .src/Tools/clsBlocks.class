' Gambas class file

' m-designer
' A simple CAD made in Gambas
'
' Copyright (C) Martin Belmonte
'
' This program is free software; you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation; either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program; if not, write to the Free Software
' Foundation, Inc., 51 Franklin St, Fifth Floor,
' Boston, MA  02110-1301  USA

Inherits ToolsBase
Public Const Gender As String = "Blocks"

Public eBlock As Block
Private cModelPreview As Collection
Public fBlock As New Punto2d

Public mPopUp As Menu

Public fBlockDegRotation As Float
Public fBlockScaleX As Float = 1
Public fBlockScaleY As Float = 1
Public Mirrored As Integer = 1  ' not mirrored; mirrored = -1

Public Function Start(Optional sfilename As Variant, Optional _mode As Integer = 0) As Boolean

    Dim xf As String[]
    Dim f As String
    Dim iREt As Integer

    eBlock = New Block
    eBlock.name = ""
    Me.EntityChecking = True
    Me.MenuRightClick = "mBlocks"

    ' fmain.GLArea1.PopupMenu = Me.MenuRightClick

    cModelPreview = New Collection

    eBlock.entities = New Collection

    Dxf.LoadFile(sFilename, cModelPreview, True, True, True)         ' cargo la entidad
    gcd.DXFtoEntity(cModelPreview["ENTITIES"], eBlock.entities)
    eBlock.name = Utils.FileWithoutExtension(Utils.FileFromPath(sFilename))

    'If iret = 0 Then Me.Finish

    ' el user eligio un bloque y lo quiere insertar en algun punto

End

Public Sub Draw()

    Dim ET As Entity, i As Integer

    If eBlock.entities.Count = 0 Then Return

    'fBlockDegRotation = CFloat(fmain.txtRotation.Text)
    'Try fBlockScaleX = CFloat(fmain.txtScalex.Text)
    If fBlockScaleX = 0 Then fBlockScaleX = 1

    'Try fmain.fBlockScaleY = CFloat(fmain.txtScaleY.Text)
    If fBlockScaleY = 0 Then fBlockScaleY = 1

    'If fmain.tbnMirrored.value Then Mirrored = -1 Else Mirrored = 1

    gl.PushMatrix
    gl.Translatef(fBlock.x, fBlock.y, 0)
    gl.Rotatef(fBlockDegRotation, 0, 0, 1)
    gl.Scalef(fBlockScaleX * Mirrored, fBlockScaleY, 1)

    For Each ET In eBlock.entities
        'et.visible = True

        et.pLayer = gcd.CurrentDrawing.CurrLayer
        et.colour = gcd.CurrentDrawing.CurrColor

        et.LineType = gcd.CurrentDrawing.CurrLineType

        et.LineWidth = gcd.CurrentDrawing.CurrLineWt

        et.ClassHandler.Draw(et)
    Next

    gl.PopMatrix

End

Public Function MouseMove(mouseX As Integer, mouseY As Integer) ' esta rutina es llamada por FCAD en el evento DrawingArea_MouseMove

    fBlock.x = gcd.Near(gcd.Xreal(mouseX))
    fBlock.y = gcd.Near(gcd.Yreal(mouseY))

    ' y si tengo enganche?

    If gcd.CurrentDrawing.iEntity[2] >= 0 Then

        ' esto re enganchado

        fBlock.x = gcd.CurrentDrawing.iEntity[0]
        fBlock.y = gcd.CurrentDrawing.iEntity[1]

    End If

End

Public Function MouseRightUp(mouseX As Integer, mouseY As Integer) ' dummy

    Me.mPopUp.Popup

    '    Debug "Salgo del menu"

End

Public Function MouseUp(mouseX As Integer, mouseY As Integer) ' called by FCAD-> DrawingArea_MouseUp

    ' creo el bloque (si no existe y luego el insert)
    Dim entInsert As New Entity
    Dim i, ie As Integer
    Dim sBloque As String
    Dim entPart As Entity

    ' busco el bloque

    If IsNull(clsEntities.FIndBlock(eBlock.name)) Then ' must add

        eBlock.layer = gcd.CurrentDrawing.CurrLayer.Name
        eBlock.HandleOwner = gcd.NewHandle()    ' code 5 BLOCK_RECORD y 330 BLOCK
        eBlock.handle = gcd.NewHandle()         ' code 5 BLOCK
        eBlock.HandleOwnerParent = "1"          ' code 330 BLOCK_RECORD
        eBlock.HandleAsociatedLayout = "1"      ' ?

        ' este block nuevo necesita un endblk al final, lo creamos

        entPart = New Entity
        entPart.ClassHandler = cadEndBlk
        entPart.Gender = "EndBlk"
        entPart.Handle = gcd.NewHandle()
        entPart.pLayer = gcd.CurrentDrawing.CurrLayer
        entPart.HandleOwner = eBlock.handle
        eBlock.entities.Add(entPart, entPart.Handle)
        For Each entPart In eBlock.entities
            entPart.HandleOwner = eBlock.HandleOwner
        Next

        gcd.CurrentDrawing.oBlocks.Add(eBlock, eBlock.handle)
    End If
    ' ahora creo el insert

    entInsert.pBlock = eBlock
    entInsert.Handle = gcd.NewHandle()
    entInsert.HandleOwner = "1"

    entInsert.ClassHandler = cadInsert
    entInsert.pLayer = gcd.CurrentDrawing.CurrLayer
    entInsert.colour = gcd.CurrentDrawing.CurrColor
    entInsert.LineType = gcd.CurrentDrawing.CurrLineType
    entInsert.LineWidth = gcd.CurrentDrawing.CurrLineWt
    entInsert.Gender = cadInsert.Gender
    entInsert.P.Add(fBlock.x)
    entInsert.P.Add(fBlock.y)

    entInsert.fParam.Add(FBlockscaleX)
    entInsert.fParam.Add(FBlockscaleY)
    entInsert.fParam.Add(1)

    entInsert.fParam.Add(FBlockdegRotation)
    entInsert.ClassHandler.Finish(entInsert)
    gcd.CurrentDrawing.oEntities.Add(entInsert, entInsert.Handle)

    EntityBuilder.LastEntity = entInsert   ' save it to repeat on rigth click

    gcd.clsJobPrevious = Me
    gcd.clsJob = cadSelection
    DrawingAids.CleanTexts

    'fmain.PanelBlockFit.Visible = False
    fmain.ListView1.Visible = True

    clsEntities.glGenDrawList(entInsert)
    clsEntities.glGenDrawListLAyers(entInsert.pLayer)

End
